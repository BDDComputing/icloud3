/////////////////////////////////////////////////////////////////////////////
//
//  ICLOUD3 EVENT LOG CARD
//
//  This custom card displays Event Log records generated by the iCloud3
//  Custom Component.  The event log records and control fields are stored
//  in the sensor.icloud3_event_log entity.
//
//  When iCloud3 starts, the version of this file, 'icloud3-event-log-card.js',
//  in the 'custom_components\icloud3' directory  (or the current directory of
//  the icloud3 platform being run) is compared with the one in 'www/custom_cards'.
//  If they do not match, the one in the 'custom_components\icloud3' is copied
//  to the 'www\custom_cards' directory.
//
//  Version=2.2.0.04 (7/20/2020)
//
/////////////////////////////////////////////////////////////////////////////

class iCloud3EventLogCard extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }
    //---------------------------------------------------------------------------
    setConfig(config) {
        const version   = "2.2.0.04"
        const cardTitle = "iCloud3 Event Log"

        const root = this.shadowRoot;
        const hass = this._hass;

        // Create card elements
        const card = document.createElement('ha-card');
        const background = document.createElement('div');
        background.id = "background";

        // Title Bar
        const titleBar = document.createElement("div");
        titleBar.id = "titleBar";
        const title = document.createElement("div");
        title.id = "title";
        title.textContent = cardTitle
        const thisButtonId = document.createElement("div");
        thisButtonId.id = "thisButtonId";
        thisButtonId.innerText = "setup";
        thisButtonId.style.setProperty('color', 'white');
        const versionText = document.createElement("div");
        versionText.id = "version";
        versionText.textContent = 'v' + version

        // Button Bar
        const buttonBody = document.createElement("body");
        buttonBody.id = "buttonBody";
        buttonBody.class = "buttonBody";
        const buttonBar0 = document.createElement("div");
        buttonBar0.id = "buttonBar0";
        buttonBar0.class = "buttonBarTop";
        const buttonBarCmd = document.createElement("div");
        buttonBarCmd.id = "buttonBarCmd";
        buttonBarCmd.class = "buttonBarCmd";
        const buttonBar1 = document.createElement("div");
        buttonBar1.id = "buttonBar1";
        buttonBar1.class = "buttonBarBot";
        buttonBar1.style.setProperty('visibility', 'hidden');

        // Name Buttons
        const btnName0     = document.createElement('btnName');
        btnName0.id        = "btnName0";
        btnName0.classList.add("btnBaseFormat");
        btnName0.style.setProperty('visibility', 'hidden');
        const btnName1     = document.createElement('btnName');
        btnName1.id        = "btnName1";
        btnName1.classList.add("btnBaseFormat");
        btnName1.style.setProperty('visibility', 'hidden');
        const btnName2     = document.createElement('btnName');
        btnName2.id        = "btnName2";
        btnName2.classList.add("btnBaseFormat");
        btnName2.style.setProperty('visibility', 'hidden');
        const btnName3     = document.createElement('btnName');
        btnName3.id        = "btnName3";
        btnName3.classList.add("btnBaseFormat");
        btnName3.style.setProperty('visibility', 'hidden');
        const btnName4     = document.createElement('btnName');
        btnName4.id        = "btnName4";
        btnName4.classList.add("btnBaseFormat");
        btnName4.style.setProperty('visibility', 'hidden');
        const btnName5     = document.createElement('btnName');
        btnName5.id        = "btnName5";
        btnName5.classList.add("btnBaseFormat");
        btnName5.style.setProperty('visibility', 'hidden');
        const btnName6     = document.createElement('btnName');
        btnName6.id        = "btnName6";
        btnName6.classList.add("btnBaseFormat");
        btnName6.style.setProperty('visibility', 'hidden');
        const btnName7     = document.createElement('btnName');
        btnName7.id        = "btnName7";
        btnName7.classList.add("btnBaseFormat");
        btnName7.style.setProperty('visibility', 'hidden');
        const btnName8     = document.createElement('btnName');
        btnName8.id        = "btnName8";
        btnName8.classList.add("btnBaseFormat");
        btnName8.style.setProperty('visibility', 'hidden');
        const btnName9     = document.createElement('btnName');
        btnName9.id        = "btnName9";
        btnName9.classList.add("btnBaseFormat");
        btnName9.style.setProperty('visibility', 'hidden');

        /* Action Select Box */
        const btnAction = document.createElement('select');
        btnAction.id    = "btnAction";
        btnAction.style.setProperty('visibility', 'visible');
        btnAction.setDefault;
        btnAction.classList.add("btnBaseFormat");
        btnAction.classList.add("btnAction");

        var btnActionOptA    = document.createElement("option");
        var btnActionOptATxt = document.createTextNode("Actions");
        btnActionOptA.setAttribute("value", "action");
        btnActionOptA.setAttribute("id", "optAction");
        btnActionOptA.classList.add("btnActionOptionTransparent");
        btnActionOptA.appendChild(btnActionOptATxt);
        btnAction.appendChild(btnActionOptA);

        var btnActionOptG = document.createElement("optGroup");
        btnActionOptG.setAttribute("label", "——— Global Actions ———");
        btnActionOptG.classList.add("btnActionOptionGroup");
        btnAction.appendChild(btnActionOptG);

        var btnActionOptG1    = document.createElement("option");
        var btnActionOptG1Txt = document.createTextNode("Restart iCloud3");
        btnActionOptG1.setAttribute("value", "restart");
        btnActionOptG1.classList.add("btnActionOption");
        btnActionOptG1.appendChild(btnActionOptG1Txt);
        btnAction.appendChild(btnActionOptG1);

        var btnActionOptG2    = document.createElement("option");
        var btnActionOptG2Txt = document.createTextNode("Pause Polling");
        btnActionOptG2.setAttribute("value", "pause");
        btnActionOptG2.classList.add("btnActionOption");
        btnActionOptG2.appendChild(btnActionOptG2Txt);
        btnAction.appendChild(btnActionOptG2);

        var btnActionOptG3    = document.createElement("option");
        var btnActionOptG3Txt = document.createTextNode("Resume Polling");
        btnActionOptG3.setAttribute("value", "resume");
        btnActionOptG3.classList.add("btnActionOption");
        btnActionOptG3.appendChild(btnActionOptG3Txt);
        btnAction.appendChild(btnActionOptG3);

        var btnActionOptG7    = document.createElement("option");
        var btnActionOptG7Txt = document.createTextNode("Request iOS App Locations");
        btnActionOptG7.setAttribute("value", "location");
        btnActionOptG7.classList.add("btnActionOption");
        btnActionOptG7.appendChild(btnActionOptG7Txt);
        btnAction.appendChild(btnActionOptG7);

        var btnActionOptG4    = document.createElement("option");
        var btnActionOptG4Txt = document.createTextNode("Show Event Log Tracking Details");
        btnActionOptG4.setAttribute("value", "dev-log_level: eventlog");
        btnActionOptG4.setAttribute("id", "optEvlog");
        btnActionOptG4.classList.add("btnActionOption");
        btnActionOptG4.appendChild(btnActionOptG4Txt);
        btnAction.appendChild(btnActionOptG4);

        var btnActionOptG5    = document.createElement("option");
        var btnActionOptG5Txt = document.createTextNode("Export Event Log");
        btnActionOptG5.setAttribute("value", "dev-export_event_log");
        btnActionOptG5.classList.add("btnActionOption");
        btnActionOptG5.appendChild(btnActionOptG5Txt);
        btnAction.appendChild(btnActionOptG5);

        var btnActionOptG6    = document.createElement("option");
        var btnActionOptG6Txt = document.createTextNode("Start HA Debug Logging");
        btnActionOptG6.setAttribute("value", "dev-log_level: debug");
        btnActionOptG6.setAttribute("id", "optHalog");
        btnActionOptG6.classList.add("btnActionOption");
        btnActionOptG6.appendChild(btnActionOptG6Txt);
        btnAction.appendChild(btnActionOptG6);

        //---------------------------------------------------------
        var btnActionOptD = document.createElement("optGroup");
        btnActionOptD.setAttribute("label", "——— Device Actions ———");
        btnActionOptD.classList.add("btnActionOptionGroup");
        btnAction.appendChild(btnActionOptD);

        var btnActionOptD1    = document.createElement("option");
        var btnActionOptD1Txt = document.createTextNode("Pause Polling");
        btnActionOptD1.setAttribute("value", "dev-pause");
        btnActionOptD1.classList.add("btnActionOption");
        btnActionOptD1.appendChild(btnActionOptD1Txt);
        btnAction.appendChild(btnActionOptD1);

        var btnActionOptD2    = document.createElement("option");
        var btnActionOptD2Txt = document.createTextNode("Resume Polling");
        btnActionOptD2.setAttribute("value", "dev-resume");
        btnActionOptD2.classList.add("btnActionOption");
        btnActionOptD2.appendChild(btnActionOptD2Txt);
        btnAction.appendChild(btnActionOptD2);

        var btnActionOptD3    = document.createElement("option");
        var btnActionOptD3Txt = document.createTextNode("Request iOS App Location");
        btnActionOptD3.setAttribute("value", "dev-location");
        btnActionOptD3.classList.add("btnActionOption");
        btnActionOptD3.appendChild(btnActionOptD3Txt);
        btnAction.appendChild(btnActionOptD3);

        //-------------------------------------------------------------
        const btnRefresh = document.createElement('btnName');
        btnRefresh.id    = "btnRefresh";
        btnRefresh.classList.add("btnBaseFormat");
        btnRefresh.classList.add("btnRefresh");
        btnRefresh.style.setProperty('visibility', 'visible');
        btnRefresh.innerText = "Refresh";

        // Message Bar
        const eltInfoBar = document.createElement("div");
        eltInfoBar.id = "eltInfoBar";
        const eltInfoName = document.createElement("div");
        eltInfoName.id = "eltInfoName";
        eltInfoName.innerText = "Select Person/Device";

        const eltInfoUpdateTime = document.createElement("div");
        eltInfoUpdateTime.id = "eltInfoUpdateTime";
        eltInfoUpdateTime.innerText = "setup";

        const eltInfoLoadError  = document.createElement("div");
        eltInfoLoadError.id = "eltInfoLoadError";
        eltInfoLoadError.classList.add("eltInfoLoadError");
        eltInfoLoadError.style.setProperty('visibility', 'hidden');

        const eltContainer = document.createElement("div");
        eltContainer.id = "eltContainer";
        const eventLogTable = document.createElement("table");
        eventLogTable.id = "eventLogTable";

        // Style
        const style = document.createElement('style');
        style.textContent = `
            ha-card {
                background-color: var(--paper-card-background-color);
                padding: 10px;
            }
            #background {
                position: relative;
                height: 680px;
            }

            /* Title Bar set up */
            #titleBar {
                position: relative;
                display: inline-block;
                height: 20px;
                margin: 6px 0px 18px 0px;
                width: 100%;
                //border: 1px solid dodgerblue;
            }
            #title {
                //display: table-cell;
                height: 100%;
                width: 60%;
                text-align: left;
                font-size: 24px;
                margin: 0px 0px 0px 0px;
                float: left;
                vertical-align: middle;
                color: var(--primary-text-color);
                //border: 1px solid red;
            }
            #thisButtonId {
                height: 100%;
                width: 10%;
                margin: 0px 0px 0px 0px;
                color: white;
                font-size: 10px;
                //border: 1px solid green;
            }
            #version    {
                width: 10%;
                color: lightgray;
                float: right;
                margin: -32px 12px 0px 0px;
            }

            /* Message Bar setup */
            #eltInfoBar {
                position: relative;
                height: 18px;
                margin: 0px 10px 12px 0px;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            #eltInfoName {
                height: 18px;
                width: 40%;
                color: darkred;
                float: left;
                font-size: 14px;
                font-weight: 400;
                /*border: 1px solid red;*/
            }
            #eltInfoUpdateTime {
                height: 18px;
                width: 60%;
                color: darkred;
                float: right;
                text-align: right;
                font-size: 14px;
                font-weight: 400;
                /*border: 1px solid green;*/
            }
            .eltInfoLoadError {
                width: 85%;
                margin-left: auto;
                margin-right: auto;
                color: white;
                background-color: red;
                padding: 12px 12px;
                border: 1px solid darkred;
                text_align: center;
                font-size: 14px;
                font-weight: 400;
            }

            /* Event Log Table Setup
            #eventLogTableHdr {
                position: relative;
                margin: 0px 0px;
                /*height: 25px;*/
                width: 100%;
            }*/
            #eventLogTable {
                position: relative;
                margin: 0px 0px;
                width: 100%;
            }

            #eventLogTableOverlay {
                background-color: green:
            }
            /* Scrollbar */
            ::-webkit-scrollbar {width: 16px;}
            ::-webkit-scrollbar-track {background: #f1f1f1;}
            ::-webkit-scrollbar-thumb {background: #D2D6D9;}
            ::-webkit-scrollbar-thumb:hover {background: #818181;}

            /* Event Log Table */
            .eltTable {
                position: sticky;
                display: block;
                table-layout: fixed;
                /*width: 426px;*/
                width: 100%;
                border-collapse: collapse;
            }
            .eltHeader {
                position: sticky;
                table-layout: fixed;
                display: block;
                height: 16px;
                padding: 0px 0px 3px 0px;
                background-color: #d8ecf3;
                border-collapse: collapse;
                border-top: 1px solid #9dd3e2;
                border-bottom: 1px solid #9dd3e2;
            }
            .eltHeader tr {
                display: block;
            }
            .eltBody {
                display: block;
                table-layout: fixed;
                /*height: 556px;*/
                height: 545px;
                border-collapse: collapse;
                border: 1px solid #d8ecf3;
                border-top: 1px solid white;
                overflow-y: scroll;
                overflow-x: hidden;
                -webkit-overflow-scrolling: touch;
            }
            /* border: 1px solid green; */
            .eltBody tr {
                width: 408px;
                z-index: 1;
            }

            .eltBody tr:nth-child(odd) {background-color: white;}
            .eltBody tr:nth-child(even) {background-color: #F2F2F2;}

            /* Browser Text */
            .colTime            {width: 64px; color: darkgray; vertical-align: text-top;}
            .colState           {width: 90px; color: darkgray;}
            .colZone            {width: 90px; color: darkgray;}
            .colInterval        {width: 60px; color: darkgray;}
            .colTravTime        {width: 60px; color: darkgray;}
            .colDistance        {width: 60px; color: darkgray;}
            .colText            {color: black}

            /* Browser Header */
            .hdrTime            {width: 66px; text-align: left; color: black;}
            .hdrState           {width: 90px; text-align: left; color: black;}
            .hdrZone            {width: 93px; text-align: left; color: black;}
            .hdrInterval        {width: 63px; text-align: left; color: black;}
            .hdrTravTime        {width: 62px; text-align: left; color: black;}
            .hdrDistance        {width: 60px; text-align: left; color: black;}

            /* iPad Header - Portrait (w=724, h=375)  */
            .hdriPadPTime        {width: 68px; text-align: left; color: black;}
            .hdriPadPState       {width: 96px; text-align: left; color: black;}
            .hdriPadPZone        {width: 96px; text-align: left; color: black;}
            .hdriPadPInterval    {width: 67px; text-align: left; color: black;}
            .hdriPadPTravTime    {width: 64px; text-align: left; color: black;}
            .hdriPadPDistance    {width: 59px; text-align: left; color: black;}

            /* iPad Header - Landscape (w=724, h=375)  */
            .hdriPadLTime        {width: 68px; text-align: left; color: black;}
            .hdriPadLState       {width: 96px; text-align: left; color: black;}
            .hdriPadLZone        {width: 96px; text-align: left; color: black;}
            .hdriPadLInterval    {width: 67px; text-align: left; color: black;}
            .hdriPadLTravTime    {width: 64px; text-align: left; color: black;}
            .hdriPadLDistance    {width: 59px; text-align: left; color: black;}

            /* iPhone Header - Portrait (w=375, h=768) */
            .hdriPhonePTime      {width: 71px; text-align: left; color: black;}
            .hdriPhonePState     {width: 75px; text-align: left; color: black;}
            .hdriPhonePZone      {width: 71px; text-align: left; color: black;}
            .hdriPhonePInterval  {width: 42px; text-align: left; color: black;}
            .hdriPhonePTravTime  {width: 41px; text-align: left; color: black;}
            .hdriPhonePDistance  {width: 42px; text-align: left; color: black;}

            /* iPhone Text - Portrait (w=375, h=768) */
            .coliPhonePTime      {width: 66px; color: darkgray; vertical-align: text-top;}
            .coliPhonePState     {width: 57px; color: darkgray;}
            .coliPhonePZone      {width: 57px; color: darkgray;}
            .coliPhonePInterval  {width: 33px; color: darkgray;}
            .coliPhonePTravTime  {width: 31px; color: darkgray;}
            .coliPhonePDistance  {width: 31px; color: darkgray;}
            .coliPhonePText      {color: black}

            /* iPhone Header - Landscape (w=724, h=375)  */
            .hdriPhoneLTime      {width: 76px; text-align: left; color: black;}
            .hdriPhoneLState     {width: 99px; text-align: left; color: black;}
            .hdriPhoneLZone      {width: 99px; text-align: left; color: black;}
            .hdriPhoneLInterval  {width: 64px; text-align: left; color: black;}
            .hdriPhoneLTravTime  {width: 66px; text-align: left; color: black;}
            .hdriPhoneLDistance  {width: 60px; text-align: left; color: black;}

            /* iPhone Landscape (w=724, h=375)  */
            .coliPhoneLTime      {width: 72px; color: darkgray; vertical-align: text-top;}
            .coliPhoneLState     {width: 88px; color: darkgray;}
            .coliPhoneLZone      {width: 88px; color: darkgray;}
            .coliPhoneLInterval  {width: 58px; color: darkgray;}
            .coliPhoneLTravTime  {width: 58px; color: darkgray;}
            .coliPhoneLDistance  {width: 58px; color: darkgray;}
            .coliPhoneLText      {color: black}

            .rowBorder          {border-left: 2px solid cyan;}

             /* Text special colors */
            .iosappRecd         {color: teal;}
            .errorMsg           {color: red; border-left: 2px solid red;}
            .warningMsg         {color: green;}

            /* DarkGoldenRod, Fushia, DeepPink, OrangeRed, #e600e6 (Purpleish), MediumVioletRed*/
            .star1              {color: Purple;     border-left: 2px solid Purple;}
            .star2              {color: BlueViolet; border-left: 2px solid BlueViolet;}
            .star3              {color: OrangeRed;  border-left: 2px solid OrangeRed;}
            .dollar1            {color: SeaGreen;   border-left: 2px solid SeaGreen;}
            .dollar2            {color: DodgerBlue; border-left: 2px solid DodgerBlue;}
            .dollar3            {color: Blue;       border-left: 2px solid RoyalBlue;}


            .trigger            {color: black; font-weight: 300;}
            .normalText         {color: black;}
            .event              {colspan: 5;}

            .updateRecdHdr      {color: white; background-color: dodgerblue; font-weight: 450;
                                 border-left: 4px solid dodgerblue; border-bottom: 1px solid white;}
            .updateEdgeBar      {border-left: 4px solid dodgerblue;}
            .stageRecdHdr       {color: white; background-color: mediumorchid; font-weight: 450;
                                 border-top: 1px solid white; border-bottom: 1px solid white;}
            .stageEdgeBar       {border-left: 4px solid mediumorchid;}
            .dateBarHdr         {color: white; background-color: darkred;
                                 border-top: 1px solid white; border-bottom: 1px solid white;
                                 border-left: 4px solid darkred;}
            .noLeftEdge         {border-left: none;}

            .blue               {color: blue;}
            .teal               {color: teal;}
            .darkgray           {color: darkgray;}
            .dimgray            {color: dimgray;}
            .black              {color: black;}
            .silver             {color: silver;}
            .darkred            {color: darkred;}
            .green              {color: green;}
            .red                {color: red;}
            .redChg             {color: red;}
            .redbox             {border: 1px solid red; border-collapse: collapse;}

            .tableStyle         {color: DodgerBlue; border-left: 2px solid DodgerBlue;}
            .tableHeaderL       {color: DodgerBlue; text-decoration: underline; font-weight: 450;
                                 border-left: 2px solid DodgerBlue;}
            .tableHeaderR       {color: DodgerBlue; text-decoration: underline; font-weight: 450;}
            .tableHeaderREdge   {border-right: 2px solid DodgerBlue;}

            .highlightRow       {color: red;}
            .highlightItem      {color: silver;}
            .highlightItemChg   {color: silver;}

            /* Buttons */
            #buttonBody         {position: relative; width: 100%; border: 1px solid red;}
            .buttonBarTop       {position: relative; height: 25px; margin: 8px 0px 8px 0px;
                                 width: 100%; border: 1px solid blue;}
            .buttonBarBot       {position: relative; height: 25px; margin: 8px 0px 8px 0px;
                                 width: 100%; border: 1px solid green;}

            .btnBaseFormat {
                display: inline-block;
                padding: 2px 4px;
                border: 1px solid #0080F0;
                background-color: transparent;
                border-radius: 3px;
                margin: 0px 4px 4px 0px;
                box-sizing: border-box;
                text-decoration: none;
                text-align: center;
                font-weight: bolder;
                color: #0080F0;
                text-align: center;
            }

            /* Refresh Select Button */
            .btnRefresh         {color: darkgreen; border: 1px solid darkgreen;}
            #btnRefresh         {color: darkgreen; border: 1px solid darkgreen; background-color: transparent;}

            /* Action Select Button */
            #btnAction          {color: darkred;   border: 1px solid darkred; background-color: transparent;}
            .btnAction {
                height: 26px;
                width: 85px;
                font-size: 14px;
                font-weight: bolder;
                /*border: 1px solid white;*/
                border-radius: 3px;
                margin: 0px 4px 4px 0px;
                overflow: hidden;
                background: transparent;

                -webkit-appearance: none;
                -moz-appearance: none;
                transition: color 0.3s ease, background-color 0.3s ease, border-bottom-color 0.3s ease;

                background-image:
                    linear-gradient(darkred, darkred),
                    linear-gradient(darkred 40%, transparent 35%),
                    linear-gradient(-135deg, transparent 58%, darkred 50%),
                    linear-gradient(-225deg, transparent 58%, darkred 50%);
                background-size: 1px 100%, 22px 26px, 22px 26px, 22px 100%;
                background-repeat: no-repeat;
                background-position: right 20px center, right bottom, right bottom, right bottom;
            }
            .btnAction::-ms-expand {
                display: none;
            }
            .btnActionOptionGroup {
                background-color: #f9ebeb;
                color: black;
            }
            .btnActionOptionTransparent {
                background-color: white;
                color: transparent;
            }
            .btnActionOption {
                background-color: white;
                color: black;
            }

            /*  IPHONE IPAD Mods */
            /* iPhone with smaller screen*/
            @media only screen and (max-device-width: 640px),
                    only screen and (max-device-width: 667px),
                    only screen and (max-width: 480px) {

                ha-card         {padding: 4px 4px 4px 4px;}
                .eltTable       {width: 362px;}
                .eltHeader      {background-color: #ebf6f9; height: 15px; padding: 0px 0px 5px 0px;}
                .eltHeader tr   {width: 360px;}
                .eltBody tr     {width: 360px;}
                .btnBaseFormat  {margin: 0px 2px 4px 0px; padding: 1px 3px;)
                .btnRefresh     {margin: 0px 1px 4px 0px;)
                .btnAction      {width: 45px; height: 22px;}
                .updateRecd     {font-weight: 450;}

                /*
                .tableHeaderL   {border-left: 2px solid DodgerBlue;}
                .updateEdgeBar  {border-left-width: 2px;}
                .tableStyle     {color: DodgerBlue; border-left: 3px solid DodgerBlue;}
                .tableStyle     {border-left: 2px solid red;}
                */
                .ic3StartupMsg  {font-weight: 450;}
                .eltBody tr:nth-child(even) {background-color: #EEF2F5;}
                ::-webkit-scrollbar {width: 1px;}
                ::-webkit-scrollbar-thumb {background: #818181;}
            }

            /* iPad ???
            @media only screen
                and (min-device-width : 768px)
                and (max-device-width : 1024px) {
                    .updateRecd  {font-weight: 450;}
                    .updateEdgeBar {border-left-width: 3px;}
                    .ic3StartupMsg {font-weight: 450;}
                    .eltBody tr:nth-child(even) {background-color: #EEF2F5;}
                    ::-webkit-scrollbar {width: 1px;}
                    ::-webkit-scrollbar-thumb {background: #818181;}
                }
            */

        `;

        // Build title
        titleBar.appendChild(title);
        titleBar.appendChild(thisButtonId);
        titleBar.appendChild(versionText);


        // Build Message Bar
        eltInfoBar.appendChild(eltInfoName);
        eltInfoBar.appendChild(eltInfoUpdateTime);
        eltInfoBar.appendChild(eltInfoLoadError)

        // Create Buttons
        buttonBar0.appendChild(btnName0);
        buttonBar0.appendChild(btnName1);
        buttonBar0.appendChild(btnName2);
        buttonBar0.appendChild(btnName3);
        buttonBar0.appendChild(btnName4);
        buttonBar0.appendChild(btnAction);
        buttonBar0.appendChild(btnRefresh);

        buttonBar1.appendChild(btnName5);
        buttonBar1.appendChild(btnName6);
        buttonBar1.appendChild(btnName7);
        buttonBar1.appendChild(btnName8);
        buttonBar1.appendChild(btnName9);

        buttonBody.appendChild(buttonBar0)
        buttonBody.appendChild(buttonBar1)

        eltContainer.appendChild(eventLogTable)

        // Create Background
        background.appendChild(titleBar)
        background.appendChild(buttonBar0)
        background.appendChild(buttonBar1)
        background.appendChild(eltInfoBar)
        background.appendChild(eltContainer)
        background.appendChild(style);

        card.appendChild(background);
        root.appendChild(card);

        // Click & Mouse Events
        for (let i = 0; i < 10; i++) {
            let buttonId = 'btnName' + i
            let button   = root.getElementById(buttonId)

            button.addEventListener("mousedown", event => { this._nameButtonPress(buttonId); });
            button.addEventListener("mouseover", event => { this._btnClassMouseOver(buttonId); });
            button.addEventListener("mouseout",  event => { this._btnClassMouseOut(buttonId); });
        }

        btnAction.addEventListener("change", event => { this._commandButtonPress("btnAction"); });
        btnAction.addEventListener("mouseover", event => { this._btnClassMouseOver("btnAction"); });
        btnAction.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnAction"); });

        btnRefresh.addEventListener("mousedown", event => { this._commandButtonPress("btnRefresh"); });
        btnRefresh.addEventListener("mouseover", event => { this._btnClassMouseOver("btnRefresh"); });
        btnRefresh.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnRefresh"); });

        // Add to root
        this._config = config;
    }

    // Create card.
//---------------------------------------------------------------------------
    set hass(hass) {
        /* Hass will do this on a regular basis. If this is the first time
        through, set up the button names. otherwise, display the event table.
        */
        const root   = this.shadowRoot;
        const config = this._config;
        this._hass   = hass;
        const thisButtonId      = root.getElementById("thisButtonId")
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")

        try {
            const updateTimeAttr    = hass.states['sensor.icloud3_event_log'].attributes['update_time']

            if (eltInfoUpdateTime.innerText == "setup") {
                this._setupButtonNames()
                this._nameButtonPress(this._currentButtonId())
            }

            if (eltInfoUpdateTime.innerText.indexOf(updateTimeAttr) == -1) {
                this._setupEventLogTable('hass')
            }
        }
        catch(err) {
            const buttonBar0        = root.getElementById("buttonBar0")
            const btnAction         = root.getElementById('btnAction')
            const btnRefresh        = root.getElementById('btnRefresh')
            const eltInfoName       = root.getElementById("eltInfoName")
            const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
            const eltInfoLoadError  = root.getElementById("eltInfoLoadError")

            const errorMsg = 'Error: iCloud3 must be running to use the iCloud3 Event Log. It is not installed, not running, has not been set up or there are errors.<hr>Be sure you have setup the iCloud3 device_tracker platform in the HA configuration.yaml file.<br><br>Check for iCloud3 load errors in the HA Logs here:<br>HA Sidebar>Configuration>Logs.<br\><br\>Review the iCloud3 documentation for more information here:<br>https://gcobb321.github.io/icloud3/#/chapters/1-installing-icloud3>'

            buttonBar0.style.setProperty('visibility', 'hidden')
            btnAction.style.setProperty('visibility', 'hidden')
            btnRefresh.style.setProperty('visibility', 'hidden')
            eltInfoName.style.setProperty('visibility', 'hidden')
            eltInfoUpdateTime.style.setProperty('visibility', 'hidden')
            eltInfoLoadError.style.setProperty('visibility', 'visible')
            eltInfoLoadError.innerHTML = errorMsg


        }


    }

//---------------------------------------------------------------------------
     _setupButtonNames() {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the names on the buttons, and make them visible.
        */
        const root         = this.shadowRoot;
        const hass         = this._hass;
        const thisButtonId = root.getElementById("thisButtonId")
        const btnAction      = root.getElementById('btnAction')
        const btnRefresh   = root.getElementById('btnRefresh')
        const filtername   = hass.states['sensor.icloud3_event_log'].attributes['filtername']
        const logLevelDebug= hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const namesAttr    = hass.states['sensor.icloud3_event_log'].attributes['names']
        const names        = Object.values(namesAttr)
        var msg = '', i
        var buttonPressId = ''

        for (i = 0; i < names.length; i++) {
            let buttonId = 'btnName' + i

            //Get button for data in current sensor.icloud3_event_log
            if (filtername == names[i]) {
                buttonPressId = buttonId
            }

            var button = root.getElementById(buttonId)
            button.innerText = names[i]
            button.style.setProperty('visibility', 'visible');
        }
        if (names.length < 6) {
            var buttonBar1 = root.getElementById("buttonBar1");
            buttonBar1.style.setProperty('height', '1px');
        }

        //If filtername=Initilize or some error occurs, use first button
        if (buttonPressId == '') {
            buttonPressId = 'btnName0'
        }
        thisButtonId.innerText = buttonPressId

        btnRefresh.style.color = "darkgreen"
        btnRefresh.style.background_color = "transparent"

        btnAction.style.cssFloat = "right"
        btnRefresh.style.cssFloat = "right"
    }

//---------------------------------------------------------------------------
     _setupEventLogTable(devicenameParm) {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the event log table
        */
        const root = this.shadowRoot;
        const hass = this._hass;
        const eventLogTable    = root.getElementById("eventLogTable");
        var logAttr = hass.states['sensor.icloud3_event_log'].attributes['logs']

        const eltInfoNameID = root.getElementById("eltInfoName")
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
        var eltInfoName = eltInfoNameID.innerText
        var devicenameX = eltInfoName.indexOf("(")+1
        var devicename  = eltInfoName.slice(devicenameX,-1)
        this.style.display = 'block';

        let row = 0
        var sameTextCnt = 0
        var lText = ''

        //iPhone  (portrait)  width=375, ,height=768
        //        (landscape) width=724, ,height=375
        //iPad    (portrait)  width=834, ,height=1092
        //        (landscape) width=1112, height=814
        //Windows (portrait)  width=1424, height=921

        var iPhoneP = false
        var iPhoneL = false
        var iPad    = false
        var iPadP   = false
        var iPadL   = false
        var deviceWidth = window.innerWidth
        var deviceHeight = window.innerHeight

        const userAgentStr = navigator.userAgent
        var userAgent = userAgentStr.indexOf("Alamofire")
        if (userAgent > 0) {
            if (deviceWidth < 400 && deviceHeight < 800) {
                iPhoneP = true
            } else if (deviceWidth < 800 && deviceHeight < 400) {
                iPhoneL = true
            } else if (deviceWidth < 850 && deviceHeight > 800) {
                iPad    = true
                iPadP   = true
            } else if (deviceWidth > 800 && deviceHeight < 850) {
                iPad    = true
                iPadL   = true
            }
        }

        let logTableHeadHTML = ''
        logTableHeadHTML += '<thead id="eltHeader">'
        logTableHeadHTML += '<tr class="eltHeader">'
        if (iPhoneP) {
            logTableHeadHTML += '<th class="hdriPhonePTime">Time</th>'
            logTableHeadHTML += '<th class="hdriPhonePState">iOS State</th>'
            logTableHeadHTML += '<th class="hdriPhonePZone">iC3 Zone</th>'
            logTableHeadHTML += '<th class="hdriPhonePInterval">Intrvl</th>'
            logTableHeadHTML += '<th class="hdriPhonePTravTime">Trav</th>'
            logTableHeadHTML += '<th class="hdriPhonePDistance">Dist</th>'
        } else if (iPhoneL) {
            logTableHeadHTML += '<th class="hdriPhoneLTime">Time</th>'
            logTableHeadHTML += '<th class="hdriPhoneLState">iOSApp State</th>'
            logTableHeadHTML += '<th class="hdriPhoneLZone">iC3 Zone</th>'
            logTableHeadHTML += '<th class="hdriPhoneLInterval">Interval</th>'
            logTableHeadHTML += '<th class="hdriPhoneLTravTime">Travel</th>'
            logTableHeadHTML += '<th class="hdriPhoneLDistance">Distance</th>'
        } else if (iPadP) {
            logTableHeadHTML += '<th class="hdriPadPTime">Time</th>'
            logTableHeadHTML += '<th class="hdriPadPState">iOSApp State</th>'
            logTableHeadHTML += '<th class="hdriPadPZone">iC3 Zone</th>'
            logTableHeadHTML += '<th class="hdriPadPInterval">Interval</th>'
            logTableHeadHTML += '<th class="hdriPadPTravTime">Travel</th>'
            logTableHeadHTML += '<th class="hdriPadPDistance">Distance</th>'
        } else if (iPadL) {
            logTableHeadHTML += '<th class="hdriPadLTime">Time</th>'
            logTableHeadHTML += '<th class="hdriPadLState">iOSApp State</th>'
            logTableHeadHTML += '<th class="hdriPadLZone">iC3 Zone</th>'
            logTableHeadHTML += '<th class="hdriPadLInterval">Interval</th>'
            logTableHeadHTML += '<th class="hdriPadLTravTime">Travel</th>'
            logTableHeadHTML += '<th class="hdriPadLDistance">Distance</th>'
        } else {
            logTableHeadHTML += '<th class="hdrTime">Time</th>'
            logTableHeadHTML += '<th class="hdrState">iOSApp State</th>'
            logTableHeadHTML += '<th class="hdrZone">iC3 Zone</th>'
            logTableHeadHTML += '<th class="hdrInterval">Interval</th>'
            logTableHeadHTML += '<th class="hdrTravTime">Travel</th>'
            logTableHeadHTML += '<th class="hdrDistance">Distance</th>'
        }
        logTableHeadHTML += '<th class="hdrScroll"> </th>'
        logTableHeadHTML += '</tr></thead>'

        let logTableHTML = ''
        logTableHTML     += '<div class="eltTable">'
        logTableHTML     += '<table id ="eltTable" >'
        logTableHTML     += logTableHeadHTML
        logTableHTML     += '<tbody id="eltBody" class="eltBody">'

        /*
        Example of log file string:
        [['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud Completed'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Interval basis: 4iz-InZone, Zone=home, Dir=in_zone'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Location Data Prepared (27.72682, -80.390507)'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Preparing Location Data'], ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud, nextUpdateTime reached'],
        ['10:54:33', 'home', 'Home', '0 mi', '', '2 hrs', 'Update cancelled, Old location data, Age 18.9 min, Retry #1']]

        Data extraction steps:
        1. Drop '[[' and ']]' at each end.
        2. Split on '], ][' to create a list item for each record.
        3. Cycle through list records. Split on ', ' to create each element.
        */

        if (eltInfoUpdateTime.innerText == "iCloud3 Restarting") {
            logTableHTML += '<tr class = "eltRow">'
            logTableHTML += '<td>iCloud3 Restarting (You may have to refresh the browser screen)</td>'
            logTableHTML += '</tr>'

        } else if (logAttr.length != 0) {
            var logEntriesRaw = logAttr.slice(2,-2)
            var logEntries    = logEntriesRaw.split('], [',99999)
            var i, eltRow
            var completed_item_highlight_next_row = false
            var lastRecdTestChg = ''
            var classUpdateEdgeBar = ''
            var classStageEdgeBar = ''
            var cancelEdgeBarFlag = false

            //alert(logEntries)
            for (i = 0; i < logEntries.length-1; i++) {
                var thisRecd  = logEntries[i].split("', '",10)
                //alert(i+"  "+thisRecd)
                var tTime     = thisRecd[0].slice(1)
                var tState    = thisRecd[1]
                var tZone     = thisRecd[2]
                var tInterval = thisRecd[3]
                var tTravTime = thisRecd[4]
                var tDistance = thisRecd[5]
                var tText     = thisRecd[6].slice(0,-1)

                var nextRecd  = logEntries[i+1].split("', '",10)
                var nState    = nextRecd[1]
                var nZone     = nextRecd[2]
                var nInterval = nextRecd[3]
                var nTravTime = nextRecd[4]
                var nDistance = nextRecd[5]
                var nText     = nextRecd[6].slice(0,-1)

                var thisRecdTestChg = tState + tZone + tInterval + tTravTime + tDistance
                var nextRecdTestChg = nState + nZone + nInterval + nTravTime + nDistance

                //tText = deviceWidth+'.'+deviceHeight+' '+tText
                if (iPhoneP) {
                    var classTime     = 'coliPhonePTime'
                    var classState    = 'coliPhonePState'
                    var classZone     = 'coliPhonePZone'
                    var classInterval = 'coliPhonePInterval'
                    var classTravTime = 'coliPhonePTravTime'
                    var classDistance = 'coliPhonePDistance'
                    var classText     = 'coliPhonePText'

                    tText = tText.replace('/icloud3','... .../icloud3')

                } else if (iPhoneL) {
                    var classTime     = 'coliPhoneLTime'
                    var classState    = 'coliPhoneLState'
                    var classZone     = 'coliPhoneLZone'
                    var classInterval = 'coliPhoneLInterval'
                    var classTravTime = 'coliPhoneLTravTime'
                    var classDistance = 'coliPhoneLDistance'
                    var classText     = 'coliPhoneLText'

                    tText = tText.replace('/icloud3','... .../icloud3')

                } else {
                    var classTime     = 'colTime'
                    var classState    = 'colState'
                    var classZone     = 'colZone'
                    var classInterval = 'colInterval'
                    var classTravTime = 'colTravTime'
                    var classDistance = 'colDistance'
                    var classText     = 'colText'
                }

                if (tText == nText) {
                    ++sameTextCnt
                    if (sameTextCnt == 1) {var firstTime = tTime}
                    continue
                }
                if (sameTextCnt > 0) {
                    tTime = firstTime
                    tText += ' (+'+ sameTextCnt +' more times)'
                    sameTextCnt = 0
                }

                //This is set when the previous item was an update complete item
                if (completed_item_highlight_next_row) {
                    classTime     += ' highlightRow'
                    classState    += ' highlightRow'
                    classZone     += ' highlightRow'
                    classInterval += ' highlightRow'
                    classTravTime += ' highlightRow'
                    classDistance += ' highlightRow'
                    completed_item_highlight_next_row = false

                //display the info in red if starting an update
                } else if (tText.indexOf("update started") >= 0) {
                    classTime     += ' highlightRow'
                    classState    += ' highlightRow'
                    classZone     += ' highlightRow'
                    classInterval += ' highlightRow'
                    classTravTime += ' highlightRow'
                    classDistance += ' highlightRow'

                //Display info in first row in red
                } else if (row == 0) {
                    classTime     += ' red'
                    classState    += ' red'
                    classZone     += ' red'
                    classInterval += ' red'
                    classTravTime += ' red'
                    classDistance += ' red'
                }

                //Set header recd background bar color and turn edge bar on/off
                //Set Startup start/complete & stage bar colors and edge bars
                var classRecdType = ' normalText'
                var classHeaderBar = ''
                if (tText.indexOf("update started") >= 0) {
                    classHeaderBar = ' updateRecdHdr'
                    cancelEdgeBarFlag = true
                } else if (tText.indexOf("update complete") >= 0) {
                    completed_item_highlight_next_row = true
                    classHeaderBar = ' updateRecdHdr'
                    classUpdateEdgeBar = ' updateEdgeBar'
                } else if (tText.startsWith("^^^")) {
                    classHeaderBar = ' dateBarHdr'
                    tText = tText.replace("^^^", "")
                    tText = tText.replace("^^^", "")
                } else if (tText.indexOf("Initializing") >= 0) {
                    classStageEdgeBar = ''
                    classHeaderBar = ' stageRecdHdr'
                } else if (tText.indexOf("Stage") >= 0) {
                    classHeaderBar = ' stageRecdHdr'
                    classStageEdgeBar = ' stageEdgeBar'
                } else if (tText.indexOf("Warning") >= 0) {
                    classHeaderBar = ' warningMsg'
                }
                if (tText.indexOf("Stage 1") >= 0) {
                    cancelEdgeBarFlag = true
                }

                //Set text color the text starts with a special color character
                var classSpecialTextColor = ''
                var specialColorFlag = true
                if (tText.startsWith("$$$")) {
                    classSpecialTextColor = ' dollar3'
                    tText = tText.slice(3)
                } else if (tText.startsWith("$$")) {
                    classSpecialTextColor = ' dollar2'
                    tText = tText.slice(2)
                } else if (tText.startsWith("$")) {
                    classSpecialTextColor = ' dollar1'
                    tText = tText.slice(1)
                } else if (tText.startsWith("***")) {
                    classSpecialTextColor = ' star3'
                    tText = tText.slice(3)
                } else if (tText.startsWith("**")) {
                    classSpecialTextColor = ' star2'
                    tText = tText.slice(2)
                } else if (tText.startsWith("*")) {
                    classSpecialTextColor = ' star1'
                    tText = tText.slice(1)
                } else if (tText.startsWith("__")) {
                    classSpecialTextColor = ' normalText'

                } else {
                    specialColorFlag = false
                    classSpecialTextColor = ''
                }

                var classErrorMsg = ''
                if (tText.indexOf("Error") >= 0) {
                    classErrorMsg = ' errorMsg'
                } else if (tText.indexOf("Failed") >= 0) {
                    classHeadeclassErrorMsgrBar = ' errorMsg'
                } else if (tText.startsWith("!")) {
                    classErrorMsg = ' errorMsg'
                    tText = tText.slice(1)
                }

                //Change CRLF in the text string to HTML >b> for a new line
                while (tText.indexOf("CRLF") >= 0) {
                    tText = tText.replace("CRLF", "<br>")
                }

                //If displaying a table, the State & Interval can contain column titles
                var classTable = ''
                if (tText.indexOf("¤s") >= 0) {
                    classTable     = ' tableStyle'

                    if (iPhoneP || iPhoneL || iPad) {
                        tState    = ""
                        tInterval = ""
                    } else {
                        classState    += ' tableHeaderL'
                        classInterval += ' tableHeaderR'
                    }
                }

                //Build the table HTML from the special characters in the recd
                // ¤s=<table><tr>                     Table start, Row start
                // ¤e=</tr></table>                   Row end, Table end
                // §=</tr><tr>                        Row end, next row start
                // «40=<td style='width: 40%'>        Col start, 40% width
                // ¦0=</td><td>                       Col end, next col start
                // ¦10=</td><td style='width: 10%'>   Col end, next col start-width 10%
                // ¦40=</td><td style='width: 40%'>
                tText = tText.replace(/¤s/g, "<table style='width: 100%'>")
                tText = tText.replace(/¤e/g, "</table>")
                tText = tText.replace(/«LT-/g, "<tr><td style='width: 28%'>")
                tText = tText.replace(/¦LC-/g, "</td><td style='width: 8%'>")
                tText = tText.replace(/¦RT-/g, "</td><td style='width: 28%'>")
                tText = tText.replace(/¦RC-/g, "</td><td style='width: 8%'>")
                tText = tText.replace(/»/g, "</td></tr>")

                //Abbreviate text if displaying on an iPhone with a smaller display
                if (iPhoneP) {
                    tInterval = tInterval.replace(' sec','s')
                    tInterval = tInterval.replace(' min','m')
                    tInterval = tInterval.replace(' hrs','h')
                    tInterval = tInterval.replace(' hr','h')

                    tTravTime = tTravTime.replace(' sec','s')
                    tTravTime = tTravTime.replace(' min','m')
                    tTravTime = tTravTime.replace(' hrs','h')
                    tTravTime = tTravTime.replace(' hr','h')

                    tDistance  = tDistance.replace(' mi','mi')
                    tDistance  = tDistance.replace(' km','km')
                }

                //Determine if the state/zone/dist/time line should be displayed
                var displayStateZoneLineFlag = false
                if (thisRecdTestChg != nextRecdTestChg)     {displayStateZoneLineFlag = true}
                if (classTime.indexOf("highlightRow") >= 0) {displayStateZoneLineFlag = true}
                if (classTime.indexOf("red") >= 0)          {displayStateZoneLineFlag = true}
                if (tState == '' && tZone == '')            {displayStateZoneLineFlag = false}
                if (tText.startsWith("^^^"))                {displayStateZoneLineFlag = false}

                if (row > 1) {classTime += classUpdateEdgeBar + classStageEdgeBar}

                //Display Info Row
                if (displayStateZoneLineFlag) {
                    if (tInterval == '') {tInterval = ' '}
                    if (tTravTime == '') {tTravTime = ' '}
                    if (tDistance == '') {tDistance = ' '}

                    logTableHTML += '<tr class = "eltRow">'
                    logTableHTML += '<td class="'+classTime     +'">'+tTime    +'</td>'
                    logTableHTML += '<td class="'+classState    +'">'+tState   +'</td>'
                    logTableHTML += '<td class="'+classZone     +'">'+tZone    +'</td>'
                    logTableHTML += '<td class="'+classInterval +'">'+tInterval+'</td>'
                    logTableHTML += '<td class="'+classTravTime +'">'+tTravTime+'</td>'
                    logTableHTML += '<td class="'+classDistance +'">'+tDistance+'</td>'
                    logTableHTML += '</tr>'
                    ++row
                }
                //Display Text Row
                classTime = classTime.replace("highlightRow", "")
                classTime = classTime.replace("highlightItem", "")
                classTime += classRecdType + classHeaderBar
                classTime += ' darkgray'

                classText += classHeaderBar + classSpecialTextColor + classTable + classErrorMsg

                logTableHTML += '<tr class = "eltRow">'

                if (classTime.indexOf("Hdr") >= 0) {
                    classText    += ' noLeftEdge'
                    logTableHTML += '<td class="'+classTime+'"></td>'
                } else {
                    logTableHTML += '<td class="'+classTime+'">'+tTime+'</td>'
                }

                logTableHTML += '</td>'
                logTableHTML += '<td class="'+classText+'"; colspan="5">'+tText+'</td>'
                logTableHTML += '</tr>'
                ++row

                if (cancelEdgeBarFlag) {
                    classUpdateEdgeBar = ''
                    classStageEdgeBar  = ''
                    cancelEdgeBarFlag  = false
                }
                var lastRecdTestChg = tState + tZone + tInterval + tTravTime + tDistance

                if (row == 20) {
                    eventLogTable.innerHTML = logTableHTML + '</tbody>'
                    this._resize_header_width()
                }
            }
            logTableHTML += ''
        }

        logTableHTML += '</tbody></table></div>'

        eventLogTable.innerHTML = logTableHTML;

        if (row < 20) {
            this._resize_header_width()
        }

        const updateTimeAttr    = hass.states['sensor.icloud3_event_log'].attributes['update_time']
        const logLevelDebug     = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const optEvlog  = root.getElementById("optEvlog")
        const optHalog  = root.getElementById("optHalog")
        const optAction = root.getElementById('optAction')

        if (logLevelDebug.indexOf("evlog") >= 0) {
            optEvlog.text = "Hide Event Log Tracking Details"
        } else {
            optEvlog.text = "Show Event Log Tracking Details"
        }
        if (logLevelDebug.indexOf("halog") >= 0) {
            optHalog.text = "Stop HA Debug Logging"
            this._displayTimeName("Debug Logging: On, "+updateTimeAttr)
        } else {
            optHalog.text = "Start HA Debug Logging"
            this._displayTimeName("")
        }
    }

//---------------------------------------------------------------------------
    _resize_header_width() {
        const root              = this.shadowRoot;
        const hass              = this._hass;
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
        const eventLogTable     = root.getElementById("eventLogTable")
        const eventLogTableHdr  = root.getElementById("eltHeader")

        if (eltInfoUpdateTime.innerText !== "setup") {
            var colCnt = eventLogTable.rows[0].cells.length
            var msg = ''
            for (var i = 0; i < colCnt; i++) {
                var colWidth    = eventLogTable.rows[0].cells[i].offsetWidth
                var colBCRObj   = eventLogTable.rows[0].cells[i].getBoundingClientRect()
                var colWidthBCR = colBCRObj.width
                eventLogTableHdr.rows[0].cells[i].style.width = colWidthBCR+'px'
            }
        }
    }
//---------------------------------------------------------------------------
    _nameButtonPress(buttonPressId) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root              = this.shadowRoot;
        const hass              = this._hass;
        this.namesAttr          = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr         = this.namesAttr
        const names             = Object.values(namesAttr)
        const devicenames       = Object.keys(namesAttr)
        const thisButtonId      = root.getElementById("thisButtonId")
        const thisButtonPressed = root.getElementById(buttonPressId)
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")

        var lastButtonId        = this._currentButtonId()
        var lastButtonPressed   = root.getElementById(lastButtonId)
        var buttonPressX        = buttonPressId.substr(-1)
        var eltInfoName         = names[buttonPressX]+"  ("+devicenames[buttonPressX]+")"

        this._displayInfoName(eltInfoName)
        thisButtonId.innerText = buttonPressId

        lastButtonPressed.style.color = "#0088F0"
        lastButtonPressed.style.backgroundColor = "transparent"
        thisButtonPressed.style.color = "white"
        thisButtonPressed.style.backgroundColor = "#0088F0"

        this._hass.callService("device_tracker", "icloud3_update", {
            device_name: devicenames[buttonPressX],
            command: 'refresh_event_log'})
    }
//---------------------------------------------------------------------------
    _commandButtonPress(actionButton) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root          = this.shadowRoot;
        const hass          = this._hass;
        const logLevelDebug = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        this.namesAttr      = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr     = this.namesAttr
        const names         = Object.values(namesAttr)
        const devicenames   = Object.keys(namesAttr)
        const btnRefresh    = root.getElementById('btnRefresh')
        const btnAction     = root.getElementById('btnAction')
        const optAction     = root.getElementById('optAction')
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
        var actionSelected  = ""

        var lastButtonId  = this._currentButtonId()
        var buttonPressX  = lastButtonId.substr(-1)
        var actionDevicename = devicenames[buttonPressX]

        if (actionButton == "btnRefresh") {
            btnRefresh.style.color = "white"
            btnRefresh.style.backgroundColor = "darkgreen"
            actionSelected = "refresh_event_log"

            this._hass.callService("device_tracker", "icloud3_update", {
                device_name: actionDevicename,
                command: "refresh_event_log"})

        } else if (actionButton == "btnAction") {
            var actionValue = btnAction.value
            var actionIndex = btnAction.selectedIndex
            btnAction.options[actionIndex].selected = false

            //Device Actions
            if (actionValue.startsWith("dev-")) {
                actionValue = actionValue.slice(4)

                this._hass.callService("device_tracker", "icloud3_update", {
                device_name: actionDevicename,
                command: actionValue})

            //Global Actions
            } else {
                this._hass.callService("device_tracker", "icloud3_update", {
                    command: actionValue})

                if (actionValue == "restart") {
                    this._displayTimeName("iCloud3 Restarting")

                } else if (actionValue == "log_level: eventlog") {
                    this._hass.callService("device_tracker", "icloud3_update", {
                        device_name: actionDevicename,
                        command: "refresh_event_log"})
                }
            }
        }
    }
//---------------------------------------------------------------------------
    _clearbtnRefresh() {
        const root = this.shadowRoot;
        const btnRefresh = root.getElementById('btnRefresh')
        btnRefresh.style.color = "darkgreen"
        btnRefresh.style.backgroundColor = "transparent"
    }

//---------------------------------------------------------------------------
    _clearbtnAction() {
        const root = this.shadowRoot;
        const btnAction = root.getElementById('btnAction')
        btnAction.style.color = "darkred"
        btnAction.style.backgroundColor = "transparent"
    }

//---------------------------------------------------------------------------
    _btnClassMouseOver(buttonId) {
        const root     = this.shadowRoot;
        const button   = root.getElementById(buttonId)
        const btnAction  = root.getElementById('btnAction')
        const hass     = this._hass;
        const logLevelDebug = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const thisButtonId = root.getElementById("thisButtonId")

        if (buttonId == "btnRefresh") {
            button.style.backgroundColor = "#c6ecd7"
            this._displayTimeName("Refresh Event Log")

        } else if (buttonId == "btnAction") {
            button.style.backgroundColor = "#f9ebeb"
            this._displayTimeName("Show iCloud3 Action Command List")

        } else if (buttonId !== thisButtonId.innerText) {
            button.style.backgroundColor = "#d8ecf3"
        }
    }
//---------------------------------------------------------------------------
    _btnClassMouseOut(buttonId) {
        const root = this.shadowRoot;
        const hass          = this._hass;
        this.logLevelDebug  = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const logLevelDebug = this.logLevelDebug
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
        const button        = root.getElementById(buttonId)
        const btnRefresh    = root.getElementById('btnRefresh')
        const btnAction     = root.getElementById('btnAction')
        const thisButtonId  = root.getElementById("thisButtonId")

        btnRefresh.style.color = "darkgreen"
        btnRefresh.style.backgroundColor = "transparent"
        btnAction.style.backgroundColor  = "transparent"
        if (buttonId !== thisButtonId.innerText) {
            button.style.backgroundColor = "transparent"
        }
        this._displayTimeName("")
    }
//---------------------------------------------------------------------------
    _currentButtonId() {
        const root = this.shadowRoot;
        const thisButtonId = root.getElementById("thisButtonId")

        return thisButtonId.innerText
    }
//---------------------------------------------------------------------------
    _displayTimeName(msg) {
        // Display  message before time field
        const root = this.shadowRoot;
        const hass = this._hass;
        const eltInfoUpdateTime = root.getElementById("eltInfoUpdateTime")
        const updateTimeAttr    = hass.states['sensor.icloud3_event_log'].attributes['update_time']

        if (msg == "") {
            eltInfoUpdateTime.innerText = "Refreshed: " + updateTimeAttr
        } else {
            eltInfoUpdateTime.innerText = msg
        }
    }

//---------------------------------------------------------------------------
    _displayInfoName(msg) {
        /* Display test messages */
        const root = this.shadowRoot;
        root.getElementById("eltInfoName").innerText = msg
    }

//---------------------------------------------------------------------------
     getCardSize() {
        return 1;
    }
}



customElements.define('icloud3-event-log-card', iCloud3EventLogCard);

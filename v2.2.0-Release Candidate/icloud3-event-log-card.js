/////////////////////////////////////////////////////////////////////////////
//
//  ICLOUD3 EVENT LOG CARD
//
//  This custom card displays Event Log records generated by the iCloud3
//  Custom Component.  The event log records and control fields are stored
//  in the sensor.icloud3_event_log entity.
//
//  When iCloud3 starts, the version of this file, 'icloud3-event-log-card.js',
//  in the 'custom_components\icloud3' directory  (or the current directory of
//  the icloud3 platform being run) is compared with the one in 'www/custom_cards'.
//  If they do not match, the one in the 'custom_components\icloud3' is copied
//  to the 'www\custom_cards' directory.
//
//  Version=2.2.0.05 (8/17/2020)
//
/////////////////////////////////////////////////////////////////////////////

class iCloud3EventLogCard extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }
    //---------------------------------------------------------------------------
    setConfig(config) {
        const version   = "2.2.0.05"
        const cardTitle = "iCloud3 Event Log"

        const root = this.shadowRoot;
        const hass = this._hass;

        // Create card elements
        const card = document.createElement('ha-card');
        const background = document.createElement('div');
        background.id = "background";

        // Title Bar
        const titleBar = document.createElement("div");
        titleBar.id = "titleBar";
        const title = document.createElement("div");
        title.id = "title";
        title.textContent = cardTitle

        const utilityBar = document.createElement("div");
        utilityBar.id = "utilityBar";
        const thisButtonId = document.createElement("div");
        thisButtonId.id = "thisButtonId";
        thisButtonId.innerText = "setup";
        const logRecdCnt = document.createElement("div");
        logRecdCnt.id = "logRecdCnt";
        logRecdCnt.innerText = "-1";
        const hdrCellWidth = document.createElement("div");
        hdrCellWidth.id = "hdrCellWidth";
        hdrCellWidth.innerText = "0,66.67px,92.22px,90px,76.67px,65.56px,62.22px";
        const versionText = document.createElement("div");
        versionText.id = "versionText";
        versionText.style.setProperty('visibility', 'hidden');
        versionText.textContent = 'v' + version

        // Button Bar
        const buttonBar = document.createElement("div");
        buttonBar.id = "buttonBar";
        buttonBar.class = "buttonBar";

        // Name Buttons
        const btnName0     = document.createElement('btnName');
        btnName0.id        = "btnName0";
        btnName0.classList.add("btnBaseFormat");
        btnName0.style.setProperty('visibility', 'visible');
        btnName0.innerText = "Setup";
        const btnName1     = document.createElement('btnName');
        btnName1.id        = "btnName1";
        btnName1.classList.add("btnBaseFormat");
        btnName1.classList.add("btnHidden");
        const btnName2     = document.createElement('btnName');
        btnName2.id        = "btnName2";
        btnName2.classList.add("btnBaseFormat");
        btnName2.classList.add("btnHidden");
        const btnName3     = document.createElement('btnName');
        btnName3.id        = "btnName3";
        btnName3.classList.add("btnBaseFormat");
        btnName3.classList.add("btnHidden");
        const btnName4     = document.createElement('btnName');
        btnName4.id        = "btnName4";
        btnName4.classList.add("btnBaseFormat");
        btnName4.classList.add("btnHidden");
        const btnName5     = document.createElement('btnName');
        btnName5.id        = "btnName5";
        btnName5.classList.add("btnBaseFormat");
        btnName5.classList.add("btnHidden");
        const btnName6     = document.createElement('btnName');
        btnName6.id        = "btnName6";
        btnName6.classList.add("btnBaseFormat");
        btnName6.classList.add("btnHidden");
        const btnName7     = document.createElement('btnName');
        btnName7.id        = "btnName7";
        btnName7.classList.add("btnBaseFormat");
        btnName7.classList.add("btnHidden");
        const btnName8     = document.createElement('btnName');
        btnName8.id        = "btnName8";
        btnName8.classList.add("btnBaseFormat");
        btnName8.classList.add("btnHidden");
        const btnName9     = document.createElement('btnName');
        btnName9.id        = "btnName9";
        btnName9.classList.add("btnBaseFormat");
        btnName9.classList.add("btnHidden");

        /* Action Select Box */
        const btnAction = document.createElement('select');
        btnAction.id    = "btnAction";
        btnAction.style.setProperty('visibility', 'visible');
        btnAction.setDefault;
        btnAction.classList.add("btnBaseFormat");
        btnAction.classList.add("btnAction");

        var btnActionOptA    = document.createElement("option");
        var btnActionOptATxt = document.createTextNode("Actions");
        btnActionOptA.setAttribute("value", "action");
        btnActionOptA.setAttribute("id", "optAction");
        btnActionOptA.classList.add("btnActionOptionTransparent");
        btnActionOptA.appendChild(btnActionOptATxt);
        btnAction.appendChild(btnActionOptA);

        var btnActionOptG = document.createElement("optGroup");
        btnActionOptG.setAttribute("label", "———— Global Actions ————");
        btnActionOptG.classList.add("btnActionOptionGroup");
        btnAction.appendChild(btnActionOptG);

        var btnActionOptG1    = document.createElement("option");
        var btnActionOptG1Txt = document.createTextNode("Restart iCloud3");
        btnActionOptG1.setAttribute("value", "restart");
        btnActionOptG1.classList.add("btnActionOption");
        btnActionOptG1.appendChild(btnActionOptG1Txt);
        btnAction.appendChild(btnActionOptG1);

        var btnActionOptG2    = document.createElement("option");
        var btnActionOptG2Txt = document.createTextNode("Pause Polling");
        btnActionOptG2.setAttribute("value", "pause");
        btnActionOptG2.classList.add("btnActionOption");
        btnActionOptG2.appendChild(btnActionOptG2Txt);
        btnAction.appendChild(btnActionOptG2);

        var btnActionOptG3    = document.createElement("option");
        var btnActionOptG3Txt = document.createTextNode("Resume Polling");
        btnActionOptG3.setAttribute("value", "resume");
        btnActionOptG3.classList.add("btnActionOption");
        btnActionOptG3.appendChild(btnActionOptG3Txt);
        btnAction.appendChild(btnActionOptG3);

        var btnActionOptG7    = document.createElement("option");
        var btnActionOptG7Txt = document.createTextNode("Request iOS App Locations");
        btnActionOptG7.setAttribute("value", "location");
        btnActionOptG7.classList.add("btnActionOption");
        btnActionOptG7.appendChild(btnActionOptG7Txt);
        btnAction.appendChild(btnActionOptG7);

        var btnActionOptG4    = document.createElement("option");
        var btnActionOptG4Txt = document.createTextNode("Show Event Log Tracking Details");
        btnActionOptG4.setAttribute("value", "dev-log_level: eventlog");
        btnActionOptG4.setAttribute("id", "optEvlog");
        btnActionOptG4.classList.add("btnActionOption");
        btnActionOptG4.appendChild(btnActionOptG4Txt);
        btnAction.appendChild(btnActionOptG4);

        var btnActionOptG5    = document.createElement("option");
        var btnActionOptG5Txt = document.createTextNode("Export Event Log");
        btnActionOptG5.setAttribute("value", "dev-export_event_log");
        btnActionOptG5.classList.add("btnActionOption");
        btnActionOptG5.appendChild(btnActionOptG5Txt);
        btnAction.appendChild(btnActionOptG5);

        var btnActionOptG6    = document.createElement("option");
        var btnActionOptG6Txt = document.createTextNode("Start HA Debug Logging");
        btnActionOptG6.setAttribute("value", "dev-log_level: debug");
        btnActionOptG6.setAttribute("id", "optHalog");
        btnActionOptG6.classList.add("btnActionOption");
        btnActionOptG6.appendChild(btnActionOptG6Txt);
        btnAction.appendChild(btnActionOptG6);

        //---------------------------------------------------------
        var btnActionOptD = document.createElement("optGroup");
        btnActionOptD.setAttribute("label", "———— Device Actions ————");
        btnActionOptD.classList.add("btnActionOptionGroup");
        btnAction.appendChild(btnActionOptD);

        var btnActionOptD1    = document.createElement("option");
        var btnActionOptD1Txt = document.createTextNode("Pause Polling");
        btnActionOptD1.setAttribute("value", "dev-pause");
        btnActionOptD1.classList.add("btnActionOption");
        btnActionOptD1.appendChild(btnActionOptD1Txt);
        btnAction.appendChild(btnActionOptD1);

        var btnActionOptD2    = document.createElement("option");
        var btnActionOptD2Txt = document.createTextNode("Resume Polling");
        btnActionOptD2.setAttribute("value", "dev-resume");
        btnActionOptD2.classList.add("btnActionOption");
        btnActionOptD2.appendChild(btnActionOptD2Txt);
        btnAction.appendChild(btnActionOptD2);

        var btnActionOptD3    = document.createElement("option");
        var btnActionOptD3Txt = document.createTextNode("Request iOS App Location");
        btnActionOptD3.setAttribute("value", "dev-location");
        btnActionOptD3.classList.add("btnActionOption");
        btnActionOptD3.appendChild(btnActionOptD3Txt);
        btnAction.appendChild(btnActionOptD3);

        var btnActionOptBL = document.createElement("option");
        var btnActionOptBLTxt = document.createTextNode("");
        btnActionOptBL.classList.add("btnActionOption");
        btnActionOptBL.appendChild(btnActionOptBLTxt)
        btnAction.appendChild(btnActionOptBL);
        var btnActionOptV = document.createElement("optGroup");
        btnActionOptV.setAttribute("label", "—— Event Log v"+version+" ———");
        btnActionOptV.classList.add("btnActionOptionGroup");
        btnAction.appendChild(btnActionOptV);
        //-------------------------------------------------------------
        const btnRefresh = document.createElement('btnName');
        btnRefresh.id    = "btnRefresh";
        btnRefresh.classList.add("btnBaseFormat");
        btnRefresh.classList.add("btnRefresh");
        btnRefresh.style.setProperty('visibility', 'visible');
        btnRefresh.innerHTML=`<svg fill="#000000" viewBox="0 0 30 30" width="26px" height="26px"><path d="M 15 3 C 12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312 C 10.25407 5.9000929 12.516602 5 15 5 C 20.19656 5 24.450989 8.9379267 24.951172 14 L 22 14 L 26 20 L 30 14 L 26.949219 14 C 26.437925 7.8516588 21.277839 3 15 3 z M 4 10 L 0 16 L 3.0507812 16 C 3.562075 22.148341 8.7221607 27 15 27 C 17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469 C 19.74593 24.099907 17.483398 25 15 25 C 9.80344 25 5.5490109 21.062074 5.0488281 16 L 8 16 L 4 10 z"/></svg>`

        // Message Bar
        const eltInfoBar = document.createElement("div");
        eltInfoBar.id = "eltInfoBar";

        const eltInfoName = document.createElement("div");
        eltInfoName.id = "eltInfoName";
        eltInfoName.innerText = "Select Person/Device";

        const eltInfoTimeMsg = document.createElement("div");
        eltInfoTimeMsg.id = "eltInfoTimeMsg";
        eltInfoTimeMsg.innerText = "setup";

        const eltInfoMsgPopup  = document.createElement("div");
        eltInfoMsgPopup.id = "eltInfoMsgPopup";
        eltInfoMsgPopup.classList.add("eltInfoMsgPopup");
        eltInfoMsgPopup.classList.add("eltInfoMsgPopupHidden");
        eltInfoMsgPopup.style.setProperty('zIndex', '9999');

        const tblEvlogContainer = document.createElement("div");
        tblEvlogContainer.id = "tblEvlogContainer"

        const tblEvlog = document.createElement("TABLE")
        tblEvlog.id = "tblEvlog"
        tblEvlog.classList.add("tblEvlog")

        const tblEvlogHdr = document.createElement("TH")
        tblEvlogHdr.id = "tblEvlogHdr"
        tblEvlogHdr.classList.add("tblEvlogHeader")

        const tblEvlogBody = document.createElement("BODY")
        tblEvlogBody.id = "tblEvlogBody"
        tblEvlogBody.classList.add("tblEvlogBody")

         // Style
        const cssStyle = document.createElement('style');
        cssStyle.textContent = `
            ha-card {
                background-color: var(--card-background-color);
                padding: 10px;
            }
            #background {
                position: relative;
                height: 680px;
                /*width: 473px;*/
            }

            /* Title Bar set up */
            #titleBar {
                position: relative;
                display: inline-block;
                height: 20px;
                margin: 4px 0px -6px 0px;
                width: 100%;
                //border: 1px solid dodgerblue;
            }
            #title {
                height: 100%;
                width: 60%;
                text-align: left;
                font-size: 24px;
                margin: 0px 0px 0px 0px;
                float: left;
                vertical-align: middle;
                color: var(--primary-text-color);
                //border: 1px solid red;
            }
            /* Refresh Select Button */
            #btnRefresh {
                margin: 0px 0px 0px 0px;
                border: 0px solid transparent;
                float: right;
            }
            svg         {fill: darkred;}
            svg:hover   {fill: red;}

            #utilityBar {
                position: relative;
                display: inline-block;
                margin: 2px 0px -10px 0px;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            #thisButtonId, #logRecdCnt, #hdrCellWidth {
                font-size: 2px;
                width: 25px;
                float: left;
                color: white;
                /*border: 1px solid green;*/
            }
            #versionText {
                color: silver;
                float: right;
            }

            /* Message Bar setup */
            #eltInfoBar {
                position: relative;
                height: 18px;
                margin: 2px 0px 10px 0px;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            #eltInfoName {
                width: 40%;
                color: darkred;
                float: left;
                font-size: 14px;
                font-weight: 400;
                /*border: 1px solid red;*/
            }
            #eltInfoTimeMsg {
                margin: 0px 4px 0px 0px;
                color: darkred;
                float: right;
                font-size: 14px;
                font-weight: 400;
                /*border: 1px solid green;*/
            }
            .eltInfoMsgPopup {
                position: relative;
                width: 85%;
                margin-left: auto;
                margin-right: auto;
                color: white;
                background-color: red;
                padding: 12px 12px;
                font-size: 14px;
                font-weight: 400;
                z-index: 9999;
                -webkit-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                -moz-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                box-shadow: 3px 3px 20px 3px rgba(0,0,0,0.75);
            }
            .eltInfoMsgPopupHidden {
                height: 0px;
                width: 0px;
                /*margin: 0px;*/
                /*padding: 0px;*/
                visibility: hidden;
                border: 0px;
            }

            /* Event Log Table Setup
            #tblEvlogHdr {
                position: relative;
                margin: 0px 0px;
                width: 100%;
            }*/
            #tblEvlog {
                position: relative;
                margin: 0px 0px;
                width: 100%;
            }

            #tblEvlogOverlay {
                background-color: green:
            }
            /* Scrollbar */
            ::-webkit-scrollbar {width: 16px;}
            ::-webkit-scrollbar-track {background: #f1f1f1;}
            ::-webkit-scrollbar-thumb {background: #D2D6D9;}
            ::-webkit-scrollbar-thumb:hover {background: #818181;}

            /* Event Log Table */
            .tblEvlog {
                position: sticky;
                display: block;
                table-layout: fixed;
                width: 100%;
                border-collapse: collapse;
            }
            .tblEvlogHdr {
                position: sticky;
                table-layout: fixed;
                display: block;
                height: 16px;
                padding: 0px 0px 3px 0px;
                background-color: #d8ecf3;
                border-collapse: collapse;
                border-top: 1px solid #9dd3e2;
                border-bottom: 1px solid #9dd3e2;
            }
            .tblEvlogHdr tr {
                display: block;
            }
            .tblEvlogBody {
                display: block;
                table-layout: fixed;
                height: 556px;
                border-collapse: collapse;
                border: 1px solid #d8ecf3;
                border-top: 1px solid white;
                overflow-y: scroll;
                overflow-x: hidden;
                -webkit-overflow-scrolling: touch;
            }
            /* border: 1px solid green; */
            .tblEvlogBody tr {
                /*width: 408px;*/
                z-index: 1;
            }

            .tblEvlogBody tr:nth-child(odd) {background-color: white;}
            .tblEvlogBody tr:nth-child(even) {background-color: #F2F2F2;}

            /* Browser Text */
            .colTime        {width: 66.67x; color: darkgray; vertical-align: text-top;}
            .colStat        {width: 92.22px; color: darkgray;}
            .colZone        {width: 90.00px; color: darkgray;}
            .colIntv        {width: 76.67px; color: darkgray;}
            .colTrav        {width: 65.56px; color: darkgray;}
            .colDist        {width: 62.22px; color: darkgray;}
            .colText        {color: black}

            /* Browser Header */
            .hTime        {width: 64.6px; text-align: left; color: black; padding-left: 4px;}
            .hStat        {width: 90.2px; text-align: left; color: black;}
            .hZone        {width: 88.0px; text-align: left; color: black;}
            .hIntv        {width: 73.6px; text-align: left; color: black;}
            .hTrav        {width: 63.6px; text-align: left; color: black;}
            .hDist        {width: 59.1px; text-align: left; color: black;}
            .hdrBase      {text-align: left; color: black;}

            .rowBorder          {border-left: 2px solid cyan;}

             /* Text special colors */
            .iosappRecd         {color: teal;}
            .errorMsg           {color: red; border-left: 2px solid red;}
            .warningMsg         {color: green;}

            /* DarkGoldenRod, Fushia, DeepPink, OrangeRed, #e600e6 (firebrickish), MediumVioletRed*/
            .star1              {color: firebrick;     border-left: 2px solid firebrick;}
            .star2              {color: BlueViolet; border-left: 2px solid BlueViolet;}
            .star3              {color: OrangeRed;  border-left: 2px solid OrangeRed;}
            .dollar1            {color: SeaGreen;   border-left: 2px solid SeaGreen;}
            .dollar2            {color: DodgerBlue; border-left: 2px solid DodgerBlue;}
            .dollar3            {color: Blue;       border-left: 2px solid RoyalBlue;}


            .trigger            {color: black; font-weight: 300;}
            .normalText         {color: black;}
            .event              {colspan: 5;}

            .updateRecdHdr      {color: white; background-color: dodgerblue; font-weight: 450;
                                 border-left: 4px solid dodgerblue; border-bottom: 1px solid white;}
            .updateEdgeBar      {border-left: 4px solid dodgerblue;}
            .stageRecdHdr       {color: white; background-color: firebrick; font-weight: 450;
                                 border-top: 1px solid white; border-bottom: 1px solid white;}
            .stageEdgeBar       {border-left: 4px solid firebrick;}
            .dateBarHdr         {color: white; background-color: darkred;
                                 border-top: 1px solid white; border-bottom: 1px solid white;
                                 border-left: 4px solid darkred;}
            .noLeftEdge         {border-left: none;}

            .blue               {color: blue;}
            .teal               {color: teal;}
            .darkgray           {color: darkgray;}
            .dimgray            {color: dimgray;}
            .black              {color: black;}
            .silver             {color: silver;}
            .darkred            {color: darkred;}
            .green              {color: green;}
            .red                {color: red;}
            .redChg             {color: red;}
            .redbox             {border: 1px solid red; border-collapse: collapse;}

            .tableStyle         {color: DodgerBlue; border-left: 2px solid DodgerBlue;}
            .tableHeaderL       {color: DodgerBlue; text-decoration: underline; font-weight: 450;
                                 border-left: 2px solid DodgerBlue;}
            .tableHeaderR       {color: DodgerBlue; text-decoration: underline; font-weight: 450;}
            .tableHeaderREdge   {border-right: 2px solid DodgerBlue;}

            .highlightRow       {color: red;}
            .highlightItem      {color: silver;}
            .highlightItemChg   {color: silver;}

            /* Buttons */
            .buttonBar {
                position: relative;
                margin: 8px 0px 8px 0px;
                width: 100%;
                border: 1px solid blue;
            }
            .btnBaseFormat {
                font-family: Roboto,sans-serif;
                display: inline-block;
                height: 24px;
                padding: 1px 4px;
                border: 1px solid darkred;
                background-color: transparent;
                border-radius: 3px;
                margin: 4px 4px 0px 0px;
                box-sizing: border-box;
                font-size: 14px;
                text-decoration: none;
                text-align: center;
                font-weight: bolder;
                color: darkred;
                visibility: visible;
                /*border: 1px solid #0080F0;*/
            }
            .btnHidden {
                height: 0px;
                width: 0px;
                margin: 0px;
                padding: 0px;
                visibility: hidden;
                border: 0px;
            }


            /* Action Select Button */
            #btnAction {
                color: darkred;
                border: 1px solid darkred;
                background-color: transparent;
                float: right;
            }
            .btnAction {
                height: 24px;
                width: 80px;
                font-weight: bolder;
                border-radius: 3px;
                overflow: hidden;
                background: transparent;
                -webkit-appearance: none;
                -moz-appearance: none;
                transition: color 0.3s ease, background-color 0.3s ease, border-bottom-color 0.3s ease;

                background-image:
                    linear-gradient(darkred, darkred),
                    linear-gradient(darkred 43%, transparent 35%),
                    linear-gradient(-135deg, transparent 58%, darkred 50%),
                    linear-gradient(-225deg, transparent 58%, darkred 50%);
                background-size: 1px 100%, 22px 26px, 22px 26px, 22px 100%;
                background-repeat: no-repeat;
                background-position: right 20px center, right bottom, right bottom, right bottom;
            }
            .btnAction::-ms-expand {
                display: none;
            }
            .btnActionOptionGroup {
                background-color: #f9ebeb;
                color: black;
            }
            .btnActionOptionTransparent {
                background-color: white;
                color: transparent;
            }
            .btnActionOption {
                background-color: white;
                color: black;
            }

            /*  IPHONE IPAD Mods */
            /* iPhone with smaller screen*/
            @media only screen and (max-device-width: 640px),
                    only screen and (max-device-width: 667px),
                    only screen and (max-width: 480px) {

                ha-card         {padding: 4px 4px 4px 4px;}
                .btnBaseFormat  {margin: 0px 2px 4px 0px; padding: 1px 3px;)
                .btnAction      {width: 45px; height: 22px;}
                .updateRecd     {font-weight: 450;}

                .ic3StartupMsg  {font-weight: 450;}
                .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                ::-webkit-scrollbar {width: 1px;}
                ::-webkit-scrollbar-thumb {background: #818181;}
            }

            /* iPad ???
            @media only screen
                and (min-device-width : 768px)
                and (max-device-width : 1024px) {
                    .updateRecd  {font-weight: 450;}
                    .updateEdgeBar {border-left-width: 3px;}
                    .ic3StartupMsg {font-weight: 450;}
                    .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                    ::-webkit-scrollbar {width: 1px;}
                    ::-webkit-scrollbar-thumb {background: #818181;}
                }
            */

        `;

        // Build title
        titleBar.appendChild(title);
        titleBar.appendChild(btnRefresh);

        utilityBar.appendChild(thisButtonId);
        utilityBar.appendChild(logRecdCnt);
        utilityBar.appendChild(hdrCellWidth);
        utilityBar.appendChild(versionText);

        // Create Buttons
        buttonBar.appendChild(btnName0);
        buttonBar.appendChild(btnName1);
        buttonBar.appendChild(btnName2);
        buttonBar.appendChild(btnName3);
        buttonBar.appendChild(btnName4);
        buttonBar.appendChild(btnName5);
        buttonBar.appendChild(btnAction);
        buttonBar.appendChild(btnName6);
        buttonBar.appendChild(btnName7);
        buttonBar.appendChild(btnName8);
        buttonBar.appendChild(btnName9);

        // Build Message Bar
        eltInfoBar.appendChild(eltInfoName);
        eltInfoBar.appendChild(eltInfoTimeMsg);
        eltInfoBar.appendChild(eltInfoMsgPopup)

        tblEvlog.appendChild(tblEvlogHdr)
        tblEvlog.appendChild(tblEvlogBody)
        tblEvlogContainer.appendChild(tblEvlog)

        // Create Background
        background.appendChild(titleBar)
        background.appendChild(utilityBar)
        background.appendChild(buttonBar)
        background.appendChild(eltInfoBar)
        background.appendChild(tblEvlogContainer)
        background.appendChild(cssStyle);

        card.appendChild(background);
        root.appendChild(card);

        // Click & Mouse Events
        for (let i = 0; i <= 9; i++) {
            let buttonId = 'btnName' + i
            let button   = root.getElementById(buttonId)

            button.addEventListener("mousedown", event => { this._nameButtonPress(buttonId); });
            button.addEventListener("mouseover", event => { this._btnClassMouseOver(buttonId); });
            button.addEventListener("mouseout",  event => { this._btnClassMouseOut(buttonId); });
        }

        btnAction.addEventListener("change", event => { this._commandButtonPress("btnAction"); });
        btnAction.addEventListener("mouseover", event => { this._btnClassMouseOver("btnAction"); });
        btnAction.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnAction"); });

        btnRefresh.addEventListener("mousedown", event => { this._commandButtonPress("btnRefresh"); });
        btnRefresh.addEventListener("mouseover", event => { this._btnClassMouseOver("btnRefresh"); });
        btnRefresh.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnRefresh"); });

        // Add to root
        this._config = config;
    }

    // Create card.
    //---------------------------------------------------------------------------
    set hass(hass) {
        /* Hass will do this on a regular basis. If this is the first time
        through, set up the button names. otherwise, display the event table.
        */
       const root            = this.shadowRoot
       this._hass            = hass
       const eltInfoTimeMsg  = root.getElementById("eltInfoTimeMsg")
       const eltInfoMsgPopup = root.getElementById("eltInfoMsgPopup")

        try {
            const updateTimeAttr = hass.states['sensor.icloud3_event_log'].attributes['update_time']
            if (eltInfoTimeMsg.innerText == "setup") {
                this._setupButtonNames()
                this._nameButtonPress(this._currentButtonId())
            }

            if (eltInfoTimeMsg.innerText.indexOf(updateTimeAttr) == -1) {
                this._setupEventLogTable('hass')
            }
            eltInfoMsgPopup.classList.add('eltInfoMsgPopupHidden')
        }
        catch(err) {
            const eltInfoMsgPopup = root.getElementById("eltInfoMsgPopup")
            const eltInfoTimeMsg  = root.getElementById("eltInfoTimeMsg")

            if (eltInfoMsgPopup.classList.contains('eltInfoMsgPopupHidden') == false) {
                return
            }
            const msgRestarting = '<p>iCloud3 is restarting</p>'
            const msgNotRunning = '<p>iCloud3 Status:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• restarting,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• not running,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• not installed,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• has not been set up or,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• there are other errors.<hr>Be sure you have setup the iCloud3 device_tracker platform in the HA configuration.yaml file.<br><br>Check for iCloud3 load errors in the HA Logs here:<br>HA Sidebar>Configuration>Logs.<br><br>Review the iCloud3 documentation for more information here:<br>https://gcobb321.github.io/icloud3/#/chapters/1-installing-icloud3</p>'

            if (err.name == 'TypeError') {
                if (err.message.indexOf('attributes') > -1) {
                    if (eltInfoTimeMsg.innerText == 'setup') {
                        eltInfoMsgPopup.innerHTML = msgNotRunning
                    } else {
                        eltInfoMsgPopup.innerHTML = msgRestarting
                    }
                    eltInfoMsgPopup.classList.remove('eltInfoMsgPopupHidden')
                } else if (err.message.indexOf('undefined') == -1) {
                    alert(err)
                }
            } else {
                alert(err)
            }
        }
    }

    //---------------------------------------------------------------------------
    _setupButtonNames() {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the names on the buttons, and make them visible.
        */
        const root          = this.shadowRoot;
        const hass          = this._hass;
        const thisButtonId  = root.getElementById("thisButtonId")
        const filtername    = hass.states['sensor.icloud3_event_log'].attributes['filtername']
        const namesAttr     = hass.states['sensor.icloud3_event_log'].attributes['names']
        const names         = Object.values(namesAttr)
        var nameCnt         = names.length

        thisButtonId.innerText = 'btnName0'

        if (nameCnt > 10) {nameCnt = 10}
        for (var i = 0; i < nameCnt; i++) {
            let buttonId = 'btnName' + i
            var button = root.getElementById(buttonId)

            //Get button for data in current sensor.icloud3_event_log
            if (filtername == names[i]) {
                thisButtonId.innerText = buttonId
            }

            if (i < names.length) {
                button.innerText = names[i]
                button.style.setProperty('visibility', 'visible');
                button.classList.remove('btnHidden')
            //} else {
            //    button.innerText = "Device-"+i
            //    button.style.setProperty('visibility', 'visible');
            //    button.classList.remove('btnHidden')
            }
        }
    }

//---------------------------------------------------------------------------
     _setupEventLogTable(devicenameParm) {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the event log table
        */

        const root           = this.shadowRoot;
        const hass           = this._hass;
        const tblEvlog       = root.getElementById("tblEvlog")
        const eltInfoTimeMsg = root.getElementById("eltInfoTimeMsg")
        const hdrCellWidth   = root.getElementById("hdrCellWidth")
        const logRecdCnt     = root.getElementById("logRecdCnt")

        var logAttr = hass.states['sensor.icloud3_event_log'].attributes['logs']

        /*
        The Evlog table has b een billy and displayed but Hass usually calls this routine a
        second. No need to builds tblEvlog again but now go back thru and
        update the header cell lengths
        */
        if (logAttr.length == logRecdCnt.innerText) {
            if (hdrCellWidth.innerText.startsWith('0,')) {
                this._resize_header_width()
            }
            return
        }

        this._checkNameButtonSelected()

        if (logAttr.length > 0) {
            var logEntriesRaw = logAttr.slice(2,-2)
            var logEntries    = logEntriesRaw.split('], [',99999)
        }

        logRecdCnt.innerText = logAttr.length
        let row = 0
        var sameTextCnt = 0

        //iPhone  (portrait)  width=375, ,height=768
        //        (landscape) width=724, ,height=375
        //iPad    (portrait)  width=834, ,height=1092
        //        (landscape) width=1112, height=814
        //Windows (portrait)  width=1424, height=921

        var iPhoneP = false
        var iPhoneL = false
        var iPad    = false
        var iPadP   = false
        var iPadL   = false
        var deviceWidth = window.innerWidth
        var deviceHeight = window.innerHeight

        const userAgentStr = navigator.userAgent
        var userAgentAlamofire = userAgentStr.indexOf("Alamofire")
        var userAgentHA = userAgentStr.indexOf("HomeAssistant")
        var appleDevice = userAgentAlamofire + userAgentHA
        if (appleDevice > 0) {
            if (deviceWidth < 400 && deviceHeight < 800) {
                iPhoneP = true
            } else if (deviceWidth < 800 && deviceHeight < 400) {
                iPhoneL = true
            } else if (deviceWidth < 850 && deviceHeight > 800) {
                iPad    = true
                iPadP   = true
            } else if (deviceWidth > 800 && deviceHeight < 850) {
                iPad    = true
                iPadL   = true
            }
        }

        /* Field naming conventions (xTime examples appply to all cell fields):
            thTime = Header text for Time column
            hTime  = hTime header Id & Class name
            iTime  = iTime data cell Id name
            classTime = iTime class name
            tTime  = Time text for current record
            nTime  = Time text for next record
        */

        var cellWidth = hdrCellWidth.innerText.split(',')
        var thTime = "Time"
        var thStat = "iOS App"
        var thZone = "iC3 Zone"
        var thIntv = "Interval"
        var thTrav = "Travel"
        var thDist = "Distance"
        if (iPhoneP) {
            thIntv = "Intvl"
            thTrav = "Travl"
            thDist = "Dist"
        }
        let logTableHeadHTML = ''
        logTableHeadHTML += '<thead id="tblEvlogHdr">'
        logTableHeadHTML += '<tr class="tblEvlogHdr">'
        logTableHeadHTML += '<th id="hTime" class="hTime" style="width: '+cellWidth[1]+';">'+thTime+'</th>'
        logTableHeadHTML += '<th id="hStat" class="hStat" style="width: '+cellWidth[2]+';">'+thStat+'</th>'
        logTableHeadHTML += '<th id="hZone" class="hZone" style="width: '+cellWidth[3]+';">'+thZone+'</th>'
        logTableHeadHTML += '<th id="hIntv" class="hIntv" style="width: '+cellWidth[4]+';">'+thIntv+'</th>'
        logTableHeadHTML += '<th id="hTrav" class="hTrav" style="width: '+cellWidth[5]+';">'+thTrav+'</th>'
        logTableHeadHTML += '<th id="hDist" class="hDist" style="width: '+cellWidth[6]+';">'+thDist+'</th>'

        logTableHeadHTML += '<th id="hdrScroll"> </th>'
        logTableHeadHTML += '</tr>'
        logTableHeadHTML += '</thead>'

        let logTableHTML = ''
        logTableHTML     += '<div class="tblEvlog">'
        logTableHTML     += '<table id ="tblEvlog" >'
        logTableHTML     += logTableHeadHTML
        logTableHTML     += '<tbody id="tblEvlogBody" class="tblEvlogBody">'

        /*
        Example of log file string:
        [['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud Completed'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Interval basis: 4iz-InZone, Zone=home, Dir=in_zone'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Location Data Prepared (27.72682, -80.390507)'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Preparing Location Data'], ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud, nextUpdateTime reached'],
        ['10:54:33', 'home', 'Home', '0 mi', '', '2 hrs', 'Update cancelled, Old location data, Age 18.9 min, Retry #1']]

        Data extraction steps:
        1. Drop '[[' and ']]' at each end.
        2. Split on '], ][' to create a list item for each record.
        3. Cycle through list records. Split on ', ' to create each element.
        */
        if (eltInfoTimeMsg.innerText == "iCloud3 Restarting") {
            logTableHTML += '<tr class = "eltRow">'
            logTableHTML += '<td>iCloud3 Restarting (You may have to refresh the browser screen)</td>'
            logTableHTML += '</tr>'

        } else if (logAttr.length != 0) {
            var completed_item_highlight_next_row = false
            var classUpdateEdgeBar = ''
            var classStageEdgeBar = ''
            var cancelEdgeBarFlag = false

            for (var i = 0; i < logEntries.length-1; i++) {
                var thisRecd  = logEntries[i].split("', '",10)

                var tTime = thisRecd[0].slice(1)
                var tStat = thisRecd[1]
                var tZone = thisRecd[2]
                var tIntv = thisRecd[3]
                var tTrav = thisRecd[4]
                var tDist = thisRecd[5]
                var tText = thisRecd[6].slice(0,-1)

                var nextRecd  = logEntries[i+1].split("', '",10)
                var nStat = nextRecd[1]
                var nZone = nextRecd[2]
                var nIntv = nextRecd[3]
                var nTrav = nextRecd[4]
                var nDist = nextRecd[5]
                var nText = nextRecd[6].slice(0,-1)

                var thisRecdTestChg = tStat + tZone + tIntv + tTrav + tDist
                var nextRecdTestChg = nStat + nZone + nIntv + nTrav + nDist

                var classTime = 'colTime'
                var classStat = 'colStat'
                var classZone = 'colZone'
                var classIntv = 'colIntv'
                var classTrav = 'colTrav'
                var classDist = 'colDist'
                var classText = 'colText'
                if (iPhoneP) {
                    tText = tText.replace('/icloud3','... .../icloud3')
                }

                if (tText == nText) {
                    ++sameTextCnt
                    if (sameTextCnt == 1) {var firstTime = tTime}
                    continue
                }
                if (sameTextCnt > 0) {
                    tTime = firstTime
                    tText += ' (+'+ sameTextCnt +' more times)'
                    sameTextCnt = 0
                }

                //This is set when the previous item was an update complete item
                if (completed_item_highlight_next_row) {
                    classTime += ' highlightRow'
                    classStat += ' highlightRow'
                    classZone += ' highlightRow'
                    classIntv += ' highlightRow'
                    classTrav += ' highlightRow'
                    classDist += ' highlightRow'
                    completed_item_highlight_next_row = false

                //display the info in red if starting an update
                } else if (tText.indexOf("update started") >= 0) {
                    classTime += ' highlightRow'
                    classStat += ' highlightRow'
                    classZone += ' highlightRow'
                    classIntv += ' highlightRow'
                    classTrav += ' highlightRow'
                    classDist += ' highlightRow'

                //Display info in first row in red
                } else if (row == 0) {
                    classTime += ' red'
                    classStat += ' red'
                    classZone += ' red'
                    classIntv += ' red'
                    classTrav += ' red'
                    classDist += ' red'
                }

                //Set header recd background bar color and turn edge bar on/off
                //Set Startup start/complete & stage bar colors and edge bars
                var classRecdType = ' normalText'
                var classHeaderBar = ''
                if (tText.indexOf("update started") >= 0) {
                    classHeaderBar = ' updateRecdHdr'
                    cancelEdgeBarFlag = true
                } else if (tText.indexOf("update complete") >= 0) {
                    completed_item_highlight_next_row = true
                    classHeaderBar = ' updateRecdHdr'
                    classUpdateEdgeBar = ' updateEdgeBar'
                } else if (tText.startsWith("^^^")) {
                    classHeaderBar = ' dateBarHdr'
                    tText = tText.replace("^^^", "")
                    tText = tText.replace("^^^", "")
                } else if (tText.indexOf("Initializing") >= 0) {
                    classStageEdgeBar = ''
                    classHeaderBar = ' stageRecdHdr'
                } else if (tText.indexOf("Stage") >= 0) {
                    classHeaderBar = ' stageRecdHdr'
                    classStageEdgeBar = ' stageEdgeBar'
                } else if (tText.indexOf("Warning") >= 0) {
                    classHeaderBar = ' warningMsg'
                }
                if (tText.indexOf("Stage 1") >= 0) {
                    cancelEdgeBarFlag = true
                }

                //Set text color the text starts with a special color character
                var classSpecialTextColor = ''
                var specialColorFlag = true
                if (tText.startsWith("$$$")) {
                    classSpecialTextColor = ' dollar3'
                    tText = tText.slice(3)
                } else if (tText.startsWith("$$")) {
                    classSpecialTextColor = ' dollar2'
                    tText = tText.slice(2)
                } else if (tText.startsWith("$")) {
                    classSpecialTextColor = ' dollar1'
                    tText = tText.slice(1)
                } else if (tText.startsWith("***")) {
                    classSpecialTextColor = ' star3'
                    tText = tText.slice(3)
                } else if (tText.startsWith("**")) {
                    classSpecialTextColor = ' star2'
                    tText = tText.slice(2)
                } else if (tText.startsWith("*")) {
                    classSpecialTextColor = ' star1'
                    tText = tText.slice(1)
                } else if (tText.startsWith("__")) {
                    classSpecialTextColor = ' normalText'

                } else {
                    specialColorFlag = false
                    classSpecialTextColor = ''
                }

                var classErrorMsg = ''
                if (tText.indexOf("Error") >= 0) {
                    classErrorMsg = ' errorMsg'
                } else if (tText.indexOf("Failed") >= 0) {
                    classHeadeclassErrorMsgrBar = ' errorMsg'
                } else if (tText.startsWith("!")) {
                    classErrorMsg = ' errorMsg'
                    tText = tText.slice(1)
                }

                //Change CRLF in the text string to HTML >b> for a new line
                while (tText.indexOf("CRLF•") >= 0) {
                    tText = tText.replace("CRLF•","<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•")
                }
                while (tText.indexOf("CRLF") >= 0) {
                    tText = tText.replace("CRLF", "<br>")
                }

                //If displaying a table, the State & Interval can contain column titles
                var classTable = ''
                if (tText.indexOf("¤s") >= 0) {
                    classTable     = ' tableStyle'

                    if (iPhoneP || iPhoneL || iPad) {
                        tStat = ""
                        tIntv = ""
                    } else {
                        classStat += ' tableHeaderL'
                        classIntv += ' tableHeaderR'
                    }
                }

                //Build the table HTML from the special characters in the recd
                // ¤s=<table><tr>                     Table start, Row start
                // ¤e=</tr></table>                   Row end, Table end
                // §=</tr><tr>                        Row end, next row start
                // «40=<td style='width: 40%'>        Col start, 40% width
                // ¦0=</td><td>                       Col end, next col start
                // ¦10=</td><td style='width: 10%'>   Col end, next col start-width 10%
                // ¦40=</td><td style='width: 40%'>
                tText = tText.replace(/¤s/g, "<table style='width: 100%'>")
                tText = tText.replace(/¤e/g, "</table>")
                tText = tText.replace(/«LT-/g, "<tr><td style='width: 28%'>")
                tText = tText.replace(/¦LC-/g, "</td><td style='width: 8%'>")
                tText = tText.replace(/¦RT-/g, "</td><td style='width: 28%'>")
                tText = tText.replace(/¦RC-/g, "</td><td style='width: 8%'>")
                tText = tText.replace(/»/g, "</td></tr>")

                //Abbreviate text if displaying on an iPhone with a smaller display
                if (iPhoneP) {
                    tIntv = tIntv.replace(' sec','s')
                    tIntv = tIntv.replace(' min','m')
                    tIntv = tIntv.replace(' hrs','h')
                    tIntv = tIntv.replace(' hr','h')

                    tTrav = tTrav.replace(' sec','s')
                    tTrav = tTrav.replace(' min','m')
                    tTrav = tTrav.replace(' hrs','h')
                    tTrav = tTrav.replace(' hr','h')

                    tDist  = tDist.replace(' mi','mi')
                    tDist  = tDist.replace(' km','km')
                }

                //Determine if the state/zone/dist/time line should be displayed
                var displayStateZoneLineFlag = false
                if (thisRecdTestChg != nextRecdTestChg)     {displayStateZoneLineFlag = true}
                if (classTime.indexOf("highlightRow") >= 0) {displayStateZoneLineFlag = true}
                if (classTime.indexOf("red") >= 0)          {displayStateZoneLineFlag = true}
                if (tStat == '' && tZone == '')             {displayStateZoneLineFlag = false}
                if (tText.startsWith("^^^"))                {displayStateZoneLineFlag = false}

                if (row > 1) {classTime += classUpdateEdgeBar + classStageEdgeBar}

                //Display Info Row
                if (displayStateZoneLineFlag) {
                    if (tIntv == '') {tIntv = ' '}
                    if (tTrav == '') {tTrav = ' '}
                    if (tDist == '') {tDist = ' '}

                    ++row
                    logTableHTML += '<tr class = "eltRow">'
                    logTableHTML += '<td id="iTime" class="'+classTime +'">'+tTime+'</td>'
                    logTableHTML += '<td id="iStat" class="'+classStat +'">'+tStat+'</td>'
                    logTableHTML += '<td id="iZone" class="'+classZone +'">'+tZone+'</td>'
                    logTableHTML += '<td id="iIntv" class="'+classIntv +'">'+tIntv+'</td>'
                    logTableHTML += '<td id="iTrav" class="'+classTrav +'">'+tTrav+'</td>'
                    logTableHTML += '<td id="iDist" class="'+classDist +'">'+tDist+'</td>'
                    logTableHTML += '</tr>'
                }
                //continue
                //Display Text Row
                classTime = classTime.replace("highlightRow", "")
                classTime = classTime.replace("highlightItem", "")
                classTime += classRecdType + classHeaderBar
                classTime += ' darkgray'

                if (classTime.indexOf("Hdr") >= 0) {
                    classText    += ' noLeftEdge'
                    tTime         = ''
                }
                classText += classHeaderBar + classSpecialTextColor + classTable + classErrorMsg

                ++row
                logTableHTML += '<tr class = "eltRow">'
                logTableHTML += '<td class="'+classTime+'">'+tTime+'</td>'
                logTableHTML += '</td>'
                logTableHTML += '<td class="'+classText+'"; colspan="5">'+tText+'</td>'
                logTableHTML += '</tr>'

                if (cancelEdgeBarFlag) {
                    classUpdateEdgeBar = ''
                    classStageEdgeBar  = ''
                    cancelEdgeBarFlag  = false
                }

            }

            logTableHTML += ''

        }
        logTableHTML += '</tbody></table></div>'
        tblEvlog.innerHTML = logTableHTML

        this._resize_header_width(row)

        const updateTimeAttr = hass.states['sensor.icloud3_event_log'].attributes['update_time']
        const logLevelDebug  = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const optEvlog       = root.getElementById("optEvlog")
        const optHalog       = root.getElementById("optHalog")

        if (logLevelDebug.indexOf("evlog") >= 0) {
            optEvlog.text = "Hide Event Log Tracking Details"
        } else {
            optEvlog.text = "Show Event Log Tracking Details"
        }
        if (logLevelDebug.indexOf("halog") >= 0) {
            optHalog.text = "Stop HA Debug Logging"
            this._displayTimeName("Debug Log, "+updateTimeAttr)
        } else {
            optHalog.text = "Start HA Debug Logging"
            this._displayTimeName("")
        }
    }

//---------------------------------------------------------------------------
    _resize_header_width() {
        const root             = this.shadowRoot;
        const tblEvlog         = root.getElementById("tblEvlog")
        const hdrCellWidth     = root.getElementById("hdrCellWidth")
        var rowCnt             = tblEvlog.rows.length
        var msg = ''

        /*
        //Set widths to saved cell widths ()
        if (hdrCellWidth.innerText.startsWith('0,') == false) {
            var savedCellWidthItems = hdrCellWidth.innerText.split(',')
            for (var i = 1; i <= 6; i++) {
                tblEvlog.rows[0].cells[i-1].style.width = savedCellWidthItems[i]
            }
            return
        }
        */

        //Get, reset and save header cell widths
        var hdrCellWidthStr = ''
        rowCnt = tblEvlog.rows.length
        for (var row = 1; row < rowCnt-1; row++) {
            var cellCnt   = tblEvlog.rows[row].cells.length
            var cellWidth = tblEvlog.rows[row].cells[1].offsetWidth
            if (cellCnt > 2 && cellWidth != 0) {
                for (var i = 0; i < cellCnt; i++) {
                    var cellBCRObj   = tblEvlog.rows[row].cells[i].getBoundingClientRect()
                    var cellWidthBCR = cellBCRObj.width - 2
                    hdrCellWidthStr += cellWidthBCR + 'px,'
                    tblEvlog.rows[0].cells[i].style.width = cellWidthBCR+'px'
                }
                hdrCellWidth.innerText = row + ',' + hdrCellWidthStr
                return
            }
        }

        return
    }
//---------------------------------------------------------------------------
    _checkNameButtonSelected() {
        /* Simulate name button press using the name returned from HA when  building
        the tblEvlog table. If  the  selected name was changed on one device and
        and then the Event Log was displayed in another, the  Log revs are for the
        selected device but the name highlighter will be for the precious device selected.
        */
        const root              = this.shadowRoot;
        const hass              = this._hass;
        this.namesAttr          = hass.states['sensor.icloud3_event_log'].attributes['names']
        const filtername        = hass.states['sensor.icloud3_event_log'].attributes['filtername']
        const namesAttr         = this.namesAttr
        const names             = Object.values(namesAttr)
        var lastButtonId        = this._currentButtonId()

        for (var i = 0; i < 10; i++) {
            if (filtername == names[i]) {
                let buttonId = 'btnName' + i

                if (buttonId != lastButtonId) {
                    this._nameButtonPress(buttonId)
                }
            }
        }
    }
//---------------------------------------------------------------------------
    _nameButtonPress(buttonPressId) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root              = this.shadowRoot;
        const hass              = this._hass;
        this.namesAttr          = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr         = this.namesAttr
        const names             = Object.values(namesAttr)
        const devicenames       = Object.keys(namesAttr)
        const logRecdCnt        = root.getElementById("logRecdCnt")
        const thisButtonId      = root.getElementById("thisButtonId")
        const thisButtonPressed = root.getElementById(buttonPressId)

        var lastButtonId        = this._currentButtonId()
        var lastButtonPressed   = root.getElementById(lastButtonId)
        var buttonPressX        = buttonPressId.substr(-1)
        var eltInfoName         = names[buttonPressX]+"  ("+devicenames[buttonPressX]+")"

        this._displayMsgR(eltInfoName)
        thisButtonId.innerText = buttonPressId

        lastButtonPressed.style.color = 'darkred'
        lastButtonPressed.style.backgroundColor = "transparent"
        thisButtonPressed.style.color = "white"
        thisButtonPressed.style.backgroundColor = 'darkred'

        this._hass.callService("device_tracker", "icloud3_update", {
            device_name: devicenames[buttonPressX],
            command: 'refresh_event_log'})
    }
//---------------------------------------------------------------------------
    _commandButtonPress(actionButton) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root          = this.shadowRoot;
        const hass          = this._hass;
        this.namesAttr      = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr     = this.namesAttr
        const devicenames   = Object.keys(namesAttr)
        const btnAction     = root.getElementById('btnAction')
        var actionSelected  = ""

        var lastButtonId     = this._currentButtonId()
        var buttonPressX     = lastButtonId.substr(-1)
        var actionDevicename = devicenames[buttonPressX]

        if (actionButton == "btnRefresh") {
            actionSelected = "refresh_event_log"

            this._hass.callService("device_tracker", "icloud3_update", {
                device_name: actionDevicename,
                command: "refresh_event_log"})

        } else if (actionButton == "btnAction") {
            var actionValue = btnAction.value
            var actionIndex = btnAction.selectedIndex
            btnAction.options[actionIndex].selected = false

            //Device Actions
            if (actionValue.startsWith("dev-")) {
                actionValue = actionValue.slice(4)

                this._hass.callService("device_tracker", "icloud3_update", {
                device_name: actionDevicename,
                command: actionValue})

            //Global Actions
            } else {
                this._hass.callService("device_tracker", "icloud3_update", {
                    command: actionValue})

                if (actionValue == "restart") {
                    this._displayTimeName("iCloud3 Restarting")

                } else if (actionValue == "log_level: eventlog") {
                    this._hass.callService("device_tracker", "icloud3_update", {
                        device_name: actionDevicename,
                        command: "refresh_event_log"})
                }
            }
        }
    }

//---------------------------------------------------------------------------
    _clearbtnAction() {
        const root          = this.shadowRoot;
        const btnAction     = root.getElementById('btnAction')
        btnAction.style.color = "darkred"
        btnAction.style.backgroundColor = "transparent"
    }

//---------------------------------------------------------------------------
    _btnClassMouseOver(buttonId) {
        const root          = this.shadowRoot;
        const button        = root.getElementById(buttonId)
        const thisButtonId  = root.getElementById("thisButtonId")
        const versionText   = root.getElementById("versionText")

        if (buttonId == "btnRefresh") {
            this._displayTimeName("Refresh Event Log")
            versionText.style.setProperty('visibility', 'visible');

        } else if (buttonId == "btnAction") {
            button.style.backgroundColor = '#ffe6e6'
            this._displayTimeName("Show Action Command List")

        } else if (buttonId !== thisButtonId.innerText) {
            button.style.backgroundColor = '#ffe6e6'
        }
    }
//---------------------------------------------------------------------------
    _btnClassMouseOut(buttonId) {
        const root = this.shadowRoot;
        const hass          = this._hass;
        this.logLevelDebug  = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const button        = root.getElementById(buttonId)
        const versionText   = root.getElementById('versionText')
        const btnAction     = root.getElementById('btnAction')
        const thisButtonId  = root.getElementById("thisButtonId")

        btnAction.style.backgroundColor  = "transparent"

        if (buttonId == 'btnRefresh') {
            versionText.style.setProperty('visibility', 'hidden')
        }
        if (buttonId !== thisButtonId.innerText) {
            button.style.backgroundColor = "transparent"
        }
        this._displayTimeName("")
    }
//---------------------------------------------------------------------------
    _currentButtonId() {
        const root = this.shadowRoot;
        const thisButtonId = root.getElementById("thisButtonId")

        return thisButtonId.innerText
    }
//---------------------------------------------------------------------------
    _displayTimeName(msg) {
        // Display  message before time field
        const root = this.shadowRoot;
        const hass = this._hass;
        const eltInfoTimeMsg = root.getElementById("eltInfoTimeMsg")
        const updateTimeAttr    = hass.states['sensor.icloud3_event_log'].attributes['update_time']

        if (msg == "") {
            eltInfoTimeMsg.innerText = "Refreshed: " + updateTimeAttr
        } else {
            eltInfoTimeMsg.innerText = msg
        }
    }

//---------------------------------------------------------------------------
    _displayMsgR(msg) {
        /* Display test messages */
        const root = this.shadowRoot;
        root.getElementById("eltInfoName").innerText = msg
    }

//---------------------------------------------------------------------------
     getCardSize() {
        return 1;
    }
}



customElements.define('icloud3-event-log-card', iCloud3EventLogCard);
